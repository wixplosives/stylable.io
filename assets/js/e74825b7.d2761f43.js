"use strict";(self.webpackChunkstylable_io=self.webpackChunkstylable_io||[]).push([[2765],{3830:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>r,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"references/pseudo-classes","title":"Pseudo-Class","description":"In addition to CSS\'s native pseudo-classes, likenth-child(), Stylable allow you to define custom pseudo-classes so that you can apply styles to your components based on state. Let\'s say you want a component to have different styling applied to it when its content is loading. You can define loading as a custom pseudo-class and toggle it in your component.","source":"@site/docs/references/pseudo-classes.md","sourceDirName":"references","slug":"/references/pseudo-classes","permalink":"/docs/references/pseudo-classes","draft":false,"unlisted":false,"editUrl":"https://github.com/wixplosives/stylable.io/edit/master/docs/references/pseudo-classes.md","tags":[],"version":"current","frontMatter":{"id":"pseudo-classes","title":"Pseudo-Class"},"sidebar":"Specification Reference","previous":{"title":"Layer","permalink":"/docs/references/layer"},"next":{"title":"Pseudo-Element","permalink":"/docs/references/pseudo-elements"}}');var a=s(4848),i=s(8453);const o={id:"pseudo-classes",title:"Pseudo-Class"},l=void 0,r={},c=[{value:"Syntax",id:"syntax",level:2},{value:"Boolean",id:"boolean",level:3},{value:"Enum",id:"enum",level:3},{value:"String",id:"string",level:3},{value:"Optional string validation",id:"optional-string-validation",level:4},{value:"Number",id:"number",level:3},{value:"Optional number validation",id:"optional-number-validation",level:4},{value:"State inheritance",id:"state-inheritance",level:2},{value:"Runtime",id:"runtime",level:2},{value:"Namespace",id:"namespace",level:2},{value:"Map to selector",id:"map-to-selector",level:3}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.p,{children:["In addition to CSS's native ",(0,a.jsx)(n.code,{children:"pseudo-classes"}),", like ",(0,a.jsx)(n.code,{children:":hover"})," and ",(0,a.jsx)(n.code,{children:":nth-child()"}),", Stylable allow you to define custom pseudo-classes so that you can apply styles to your components based on state. Let's say you want a component to have different styling applied to it when its content is loading. You can define ",(0,a.jsx)(n.code,{children:"loading"})," as a custom pseudo-class and toggle it in your component."]}),"\n",(0,a.jsxs)(n.p,{children:["This page goes over how Stylable handles custom ",(0,a.jsx)(n.code,{children:"pseudo-classes"}),", for more details about the language feature itself, checkout the following resources:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://developer.mozilla.org/en/docs/Web/CSS/Pseudo-classes",children:"MDN pseudo-class"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://drafts.csswg.org/selectors/#pseudo-classes",children:"pseudo-class in spec"})}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"syntax",children:"Syntax"}),"\n",(0,a.jsxs)(n.p,{children:["The Stylable ",(0,a.jsx)(n.code,{children:"-st-states"})," declaration is used ",(0,a.jsx)(n.strong,{children:"on a class selector"})," to provide a list of the possible custom ",(0,a.jsx)(n.code,{children:"pseudo-classes"})," that can later be targeted from CSS and controlled from JavaScript."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-css",metastring:'title="list of custom states"',children:".x {\n  -st-states: stateA, stateB;\n}\n"})}),"\n",(0,a.jsx)(n.admonition,{title:"allowed context",type:"note",children:(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"-st-states"})," is only allowed in a rule with a ",(0,a.jsx)(n.strong,{children:"single class selector"})," to indicate custom pseudo classes for that class."]})}),"\n",(0,a.jsx)(n.h3,{id:"boolean",children:"Boolean"}),"\n",(0,a.jsxs)(n.p,{children:["To define a custom state that can be either ",(0,a.jsx)(n.strong,{children:"on or off"}),", provide state definitions with a single ident as the name for the state, then target the state using a pseudo-class."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-css",children:".x {\n  /* define 2 boolean states on 'x' */\n  -st-states: toggled, loading;\n}\n\n/* target single custom state */\n.x:toggled {}\n\n/* target multiple custom states */\n.x:toggled:loading {}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"enum",children:"Enum"}),"\n",(0,a.jsxs)(n.p,{children:["A custom state with a ",(0,a.jsx)(n.strong,{children:"restricted option list"})," that can target one of the options using a pseudo-class selector with a matching parameter and an ",(0,a.jsx)(n.strong,{children:"optional default value"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-css",children:".x {\n  /* define a 'size' custom state with 3 options \n     and a 'color' state with options and a default 'green' value */\n  -st-states: size(enum(small, medium, large)),\n              color(enum(reg, green, blue)) green;\n}\n\n/* target an element with a size of `medium` */\n.x:size(medium) {}\n\n/* INVALID! - 'huge' is not a possible value for size */\n.x:size(huge) {}\n\n/* INVALID! - parameter is required for size */\n.x:size {}\n\n/* VALID! - same as ':color(green)' */\n.x:color {}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"string",children:"String"}),"\n",(0,a.jsxs)(n.p,{children:["A custom state that can accept a ",(0,a.jsx)(n.code,{children:"string parameter"})," value."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-css",children:".x {\n  /* define 'category' custom state that accepts a string parameter */\n  -st-states: category(string);\n}\n\n/* target an element with state category='kitchen' */\n.x:category(kitchen) {}\n\n/* target an element with state category='office' */\n.x:category(office) {}\n"})}),"\n",(0,a.jsx)(n.h4,{id:"optional-string-validation",children:"Optional string validation"}),"\n",(0,a.jsx)(n.p,{children:"There are several options that can be used to validate the potential string parameter input:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"minLength"})," - validates min length of input"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"maxLength"})," - validates max length of input"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"contains"})," - validates substring value exist in input"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"regex"})," - validates input against a regular expression"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"To set validations on a string state type, call the string as a function and pass a list of validations."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-css",metastring:'title="string validation definition examples"',children:".a { \n  /* validates input has min/max length and has the string 'user' in it */\n  -st-states: x(string(minLength(5), maxLength(10), contains('user')));\n}\n\n.b {\n  /* validates input begins with 'user' */\n  -st-states: x(string(regex('^user')));\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"number",children:"Number"}),"\n",(0,a.jsxs)(n.p,{children:["A custom state that can accept a ",(0,a.jsx)(n.code,{children:"number parameter"})," value."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-css",children:".a {\n  /* define 'ranking' custom state that accepts a number parameter */\n  -st-states: ranking(number);\n}\n\n/* target an element with a state rankin='5' */\n.a:ranking(5) {}\n"})}),"\n",(0,a.jsx)(n.h4,{id:"optional-number-validation",children:"Optional number validation"}),"\n",(0,a.jsx)(n.p,{children:"There are several options that can be used to validate the potential number parameter input:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"min"})," - validates min size of input"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"max"})," - validates max size of input"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"multiplyOf"})," - validates input is multiply of a given value"]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-css",metastring:'title="number validation definition example"',children:'.a {\n  /* validates the targeting number argument */\n  -st-states: x(number(min(2), max(6), multipleOf(2)));\n}\n\n/* valid arguments */\n.a:x(2) {}\n.a:x(4) {}\n.a:x(6) {}\n\n/* INVALID! - "multipleOf(2)" */\n.a:x(3) {}\n.a:x(5) {}\n\n/* INVALID! - "min(2)" and "max(6)" */\n.a:x(1) {}\n.a:x(7) {}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"state-inheritance",children:"State inheritance"}),"\n",(0,a.jsxs)(n.p,{children:["When using ",(0,a.jsx)(n.a,{href:"./extend-stylesheet",children:"-st-extends"})," to extend another stylesheet or class, states definitions are inherited, but can also be overridden at any level."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-css",metastring:'title="base.st.css"',children:".root {\n  /* define states 'a' and 'b' for the root of base stylesheet */\n  -st-states: a, b;\n}\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-css",metastring:'title="extend.st.css"',children:"@st-import Base from './base.st.css';\n\n.root {\n  /* inherits states 'a' and 'b' */\n  -st-extends: Base;\n\n  /* define states 'c' and 'b' (override 'b' from 'Base') */\n  -st-states: c, b;\n}\n\n.root:a {}\n.root:b {}\n.root:c {}\n\n/* OUTPUT */\n.extend__root.base--a {}   /* 'a' defined in base */\n.extend__root.extend--b {} /* 'b' defined in base, but overridden in extend */\n.extend__root.extend--c {} /* 'c' defined in extend */\n"})}),"\n",(0,a.jsx)(n.admonition,{title:"Native pseudo-class override",type:"note",children:(0,a.jsxs)(n.p,{children:["You can override the behavior of native pseudo-classes. This can enable you to write ",(0,a.jsx)(n.a,{href:"https://remysharp.com/2010/10/08/what-is-a-polyfill",children:"polyfills"})," for forthcoming CSS pseudo-classes to ensure that when you define a name for a custom pseudo-class, if there are clashes with a new CSS pseudo-class in the future, your app's behavior does not change. We don't recommend you to override an existing CSS pseudo-class unless you want to drive your teammates insane."]})}),"\n",(0,a.jsx)(n.h2,{id:"runtime",children:"Runtime"}),"\n",(0,a.jsxs)(n.p,{children:["To activate a custom state, use the ",(0,a.jsx)(n.a,{href:"./runtime#custom-state-mapping",children:"cssStates"})," or ",(0,a.jsx)(n.a,{href:"./runtime#st-function",children:"st() function"})," to generate the active ",(0,a.jsx)(n.code,{children:"CSS classes"})," states."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"import { st, classes } from './sheet.st.css'; \n\n// active states\nst(classes.part, {\n  isOn: true,      // boolean\n  size: 'small'    // string or enum\n  place: 1         // number state\n});\n\n// un-active states - only 'part' class\nst(classes.part, {\n  isFirst: false,  // boolean\n  size: undefined  // string or enum\n  place: undefined // number\n});\n"})}),"\n",(0,a.jsx)(n.h2,{id:"namespace",children:"Namespace"}),"\n",(0,a.jsx)(n.p,{children:"Stylable generates namespaced CSS classes for custom states:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-css",children:".x:bool {}\n.x:enum(option1) {}\n.x:string(word) {}\n.x:number(55) {}\n\n/* OUTPUT */\n.NAMESPACE__x.NAMESPACE--bool {}\n.NAMESPACE__x.NAMESPACE---enum-7-option1 {}\n.NAMESPACE__x.NAMESPACE---string-4-word {}\n.NAMESPACE__x.NAMESPACE---number-2-55 {}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"map-to-selector",children:"Map to selector"}),"\n",(0,a.jsxs)(n.p,{children:["In some cases the default way Stylable transforms a state into a class is not the desired behavior, for example when writing style interface to an external view that might mark state as an attribute, For this ",(0,a.jsx)(n.code,{children:"mapped state"})," can be used to transform the state into a another selector."]}),"\n",(0,a.jsx)(n.p,{children:"To define a global mapped state, pass a selector as a string instead of a type:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-css",children:".x {\n  -st-states: toggled('.on'), \n              loading('[dataSpinner]');\n}\n\n.x:toggled {}\n.x:loading {}\n\n/* OUTPUT */\n.NAMESPACE__x.on {}\n.NAMESPACE__x[dataSpinner] {}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Additionally a single parameter can be defined after the selector string and referenced in the selector string using ",(0,a.jsx)(n.code,{children:"$0"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-css",children:".x {\n  -st-states: size('[size=\"$0\"]', enum(small, medium, large));\n}\n\n.x:size(small) {}\n\n/* OUTPUT */\n.NAMESPACE__x[size='small'] {}\n"})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>l});var t=s(6540);const a={},i=t.createContext(a);function o(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);