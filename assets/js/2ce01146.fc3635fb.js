"use strict";(self.webpackChunkstylable_io=self.webpackChunkstylable_io||[]).push([[8447],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=c(n),f=a,d=m["".concat(l,".").concat(f)]||m[f]||u[f]||o;return n?r.createElement(d,s(s({ref:t},p),{},{components:n})):r.createElement(d,s({ref:t},p))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var c=2;c<o;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5159:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const o={id:"formatters",title:"Formatters"},s=void 0,i={unversionedId:"references/formatters",id:"references/formatters",title:"Formatters",description:"Formatters are functions that return a single CSS declaration value. They can receive arguments, process them and return the value.",source:"@site/docs/references/formatters.md",sourceDirName:"references",slug:"/references/formatters",permalink:"/docs/references/formatters",draft:!1,editUrl:"https://github.com/wixplosives/stylable.io/edit/master/docs/references/formatters.md",tags:[],version:"current",frontMatter:{id:"formatters",title:"Formatters"},sidebar:"Specification Reference",previous:{title:"Mixins",permalink:"/docs/references/mixins"},next:{title:"Stylable Variables",permalink:"/docs/references/st-variables"}},l={},c=[{value:"Formatters with variables",id:"formatters-with-variables",level:2},{value:"Nested formatters",id:"nested-formatters",level:2}],p={toc:c};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Formatters are functions that return a single CSS declaration value. They can receive arguments, process them and return the value. "),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"Currently, any argument passed through to a formatter is of type ",(0,a.kt)("inlineCode",{parentName:"p"},"string"),". We are in the process of adding support for more complex types.")),(0,a.kt)("p",null,"For example a ",(0,a.kt)("inlineCode",{parentName:"p"},"calc-font-size")," formatter can return a different value for the font size depending on the provided argument."),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"If you need to return multiple declaration values, we recommend using ",(0,a.kt)("strong",{parentName:"p"},"Stylable")," ",(0,a.kt)("a",{parentName:"p",href:"/docs/references/mixins"},"mixins"),". ")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"/* ./calc-font-size.js */\nmodule.exports = function(baseSize, modifier) {\n    switch (modifier) {\n        case 'header':\n            return `${Number(baseSize) * 2}px`;\n        case 'aside':\n            return `${Number(baseSize) * 0.75}px`; \n        default: \n            return baseSize + 'px';\n    }\n};\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-css"},'@st-import calcFontSize from "./calc-font-size";\n\n.header {\n    font-size: calcFontSize(16, header);\n}\n\n.form {\n    font-size: calcFontSize(16, body);\n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-css"},"    /* CSS output */\n    .header {\n        font-size: 32px;\n    }\n\n    .form {\n        font-size: 16px;\n    }\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-css"},"/* CSS output */\n.header {\n    font-size: 32px;\n}\n\n.form {\n    font-size: 16px;\n}\n")),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"Currently you cannot use formatters inside a native URL function. As a suggested workaround, you can return a URL function from a formattter.")),(0,a.kt)("h2",{id:"formatters-with-variables"},"Formatters with variables"),(0,a.kt)("p",null,"When the formatter is imported into the CSS, it can also be used with a ",(0,a.kt)("a",{parentName:"p",href:"/docs/references/st-variables"},"variable"),". "),(0,a.kt)("p",null,"In this example the CSS imports the same formatter as the previous example, ",(0,a.kt)("inlineCode",{parentName:"p"},"calc-font-size"),", but the variable ",(0,a.kt)("inlineCode",{parentName:"p"},"baseFontSize")," is added to the calculation.  "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-css"},'@st-import calcFontSize from "./calc-font-size";\n\n:vars {\n    baseFontSize: 12;\n}\n\n.header {\n    font-size: calcFontSize(value(baseFontSize), header);\n}\n\n.form {\n    font-size: calcFontSize(value(baseFontSize), body);\n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-css"},"/* CSS output */\n.header {\n    font-size: 24px;\n}\n.form {\n    font-size: 12px;\n}\n")),(0,a.kt)("h2",{id:"nested-formatters"},"Nested formatters"),(0,a.kt)("p",null,"You can also nest formatters to provide functions that are modular, composable and reusable. "),(0,a.kt)("p",null,"In this example the formatter ",(0,a.kt)("inlineCode",{parentName:"p"},"divBy2")," is nested in the ",(0,a.kt)("inlineCode",{parentName:"p"},"round")," formatter. Both are imported into the CSS file and the output value is calculated from both. The formatters expose to the CSS mathematical calculations that are used in the JavaScript functions."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"/* ./math.js */\nmodule.export = {\n    divBy2: function(num) {\n        return Number(Number(num) / 2);\n    },\n    round: function(num) {\n        return Math.round(Number(num));\n    }\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-css"},'@st-import [divBy2, round] from "./math";\n\n:vars {\n    baseSize: 17px;\n}\n\n.header {\n    font-size: round(divBy2(value(baseSize)))px;\n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-css"},"/* CSS output */\n.header {\n    font-size: 9px;\n}\n")))}u.isMDXComponent=!0}}]);