"use strict";(self.webpackChunkstylable_io=self.webpackChunkstylable_io||[]).push([[339],{3905:(e,t,n)=>{n.d(t,{Zo:()=>i,kt:()=>u});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},i=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,i=l(e,["components","mdxType","originalType","parentName"]),g=p(n),u=a,d=g["".concat(c,".").concat(u)]||g[u]||m[u]||o;return n?r.createElement(d,s(s({ref:t},i),{},{components:n})):r.createElement(d,s({ref:t},i))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=g;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,s[1]=l;for(var p=2;p<o;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},4741:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const o={id:"tag-selectors",title:"CSS Tag/Component Selector",sidebar_label:"Tag/Component Selector"},s=void 0,l={unversionedId:"references/tag-selectors",id:"references/tag-selectors",title:"CSS Tag/Component Selector",description:"Like CSS type selectors, Stylable tag selectors can match the names of elements in the DOM.",source:"@site/docs/references/tag-selectors.md",sourceDirName:"references",slug:"/references/tag-selectors",permalink:"/docs/references/tag-selectors",draft:!1,editUrl:"https://github.com/wixplosives/stylable.io/edit/master/docs/references/tag-selectors.md",tags:[],version:"current",frontMatter:{id:"tag-selectors",title:"CSS Tag/Component Selector",sidebar_label:"Tag/Component Selector"},sidebar:"Specification Reference",previous:{title:"Class Selectors",permalink:"/docs/references/class-selectors"},next:{title:"Extend Stylable Stylesheet",permalink:"/docs/references/extend-stylesheet"}},c={},p=[{value:"Native element",id:"native-element",level:2},{value:"Component element",id:"component-element",level:2}],i={toc:p};function m(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},i,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Like CSS ",(0,a.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/CSS/Type_selectors"},"type selectors"),", ",(0,a.kt)("strong",{parentName:"p"},"Stylable")," ",(0,a.kt)("inlineCode",{parentName:"p"},"tag selectors")," can match the names of elements in the DOM."),(0,a.kt)("p",null,"Tag selectors are ",(0,a.kt)("strong",{parentName:"p"},"not")," scoped themselves. Other selectors used with a tag selector can be scoped. For example if a ",(0,a.kt)("a",{parentName:"p",href:"/docs/references/class-selectors"},"class selector")," is used with a tag selector, the class is scoped and the tag selector is not. The matching qualified name of a tag selector can therefore target any element in the subtree of the component. "),(0,a.kt)("h2",{id:"native-element"},"Native element"),(0,a.kt)("p",null,"Targeting a native element matches any element with the same tag name that is found in a prefix selector. The prefix selector could be a class selector or the root."),(0,a.kt)("p",null,"To target ",(0,a.kt)("strong",{parentName:"p"},"all")," elements of a certain type in your project, use a ",(0,a.kt)("a",{parentName:"p",href:"/docs/references/global-selectors"},(0,a.kt)("inlineCode",{parentName:"a"},"global selector")),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-css"},'@namespace "Page";\n.root form { background: green; }\n.sideBar:hover form { background: red; }\n:global(span) { background: blue; }\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-css"},"/* CSS output - form is scoped to the page - affects any nested instance */\n.Page__root form { background: green; } \n.Page__sideBar:hover form { background: red; }\nspan { background: blue; } /* this will affect *ALL* spans in your application */\n")),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"The value ",(0,a.kt)("inlineCode",{parentName:"p"},"form")," itself is not namespaced.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"/* comp.jsx */\nimport React from 'react';\nimport { style, classes } from './comp.st.css';\n\nclass Comp extends React.Component {\n    render () {\n        return (\n            <div className={style(classes.root, this.props.className)}>\n                <div className={classes.sideBar}>\n                    <form /> /* green background and red while hovering parent */\n                </div>\n                <form /> /* green background */\n                <span /> /* blue background */\n            </div>\n        );\n    }\n}\n")),(0,a.kt)("h2",{id:"component-element"},"Component element"),(0,a.kt)("p",null,"When the value of a stylesheet is ",(0,a.kt)("a",{parentName:"p",href:"/docs/references/imports"},"imported")," with a ",(0,a.kt)("strong",{parentName:"p"},"capital first letter"),", it can be used as a component tag selector."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-css"},'@namespace "Page";\n@st-import ToggleButton from "./toggle-button.st.css";\n\n.root ToggleButton { background: green; }\n.sideBar:hover ToggleButton { background: red; }\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-css"},"/* CSS output - ToggleButton is scoped to the page, affects any nested toggle button */\n.Page__root .ToggleButton__root { background: green; }\n.Page__sideBar:hover .ToggleButton__root { background: red; }\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"/* comp.jsx */\nimport React from 'react';\nimport { style, classes } from './comp.st.css';\n\n/* React implementation - button component implements toggle-button.css */\nimport ToggleButton from './toggle-button';\n\nclass Comp extends React.Component {\n    render () {\n        return (\n            <div className={style(classes.root, this.props.className)}>\n                <div className={classes.sideBar}>\n                    <ToggleButton /> /* green background and red while hovering parent */\n                </div>\n                <ToggleButton /> /* green background */\n            </div>\n        );\n    }\n}\n")))}m.isMDXComponent=!0}}]);