"use strict";(self.webpackChunkstylable_io=self.webpackChunkstylable_io||[]).push([[8044],{3905:(e,t,s)=>{s.d(t,{Zo:()=>c,kt:()=>u});var n=s(7294);function a(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}function o(e,t){var s=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),s.push.apply(s,n)}return s}function l(e){for(var t=1;t<arguments.length;t++){var s=null!=arguments[t]?arguments[t]:{};t%2?o(Object(s),!0).forEach((function(t){a(e,t,s[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(s)):o(Object(s)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(s,t))}))}return e}function r(e,t){if(null==e)return{};var s,n,a=function(e,t){if(null==e)return{};var s,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)s=o[n],t.indexOf(s)>=0||(a[s]=e[s]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)s=o[n],t.indexOf(s)>=0||Object.prototype.propertyIsEnumerable.call(e,s)&&(a[s]=e[s])}return a}var p=n.createContext({}),i=function(e){var t=n.useContext(p),s=t;return e&&(s="function"==typeof e?e(t):l(l({},t),e)),s},c=function(e){var t=i(e.components);return n.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var s=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,c=r(e,["components","mdxType","originalType","parentName"]),m=i(s),u=a,g=m["".concat(p,".").concat(u)]||m[u]||d[u]||o;return s?n.createElement(g,l(l({ref:t},c),{},{components:s})):n.createElement(g,l({ref:t},c))}));function u(e,t){var s=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=s.length,l=new Array(o);l[0]=m;var r={};for(var p in t)hasOwnProperty.call(t,p)&&(r[p]=t[p]);r.originalType=e,r.mdxType="string"==typeof e?e:a,l[1]=r;for(var i=2;i<o;i++)l[i]=s[i];return n.createElement.apply(null,l)}return n.createElement.apply(null,s)}m.displayName="MDXCreateElement"},3143:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>r,toc:()=>i});var n=s(7462),a=(s(7294),s(3905));const o={id:"pseudo-classes",title:"Pseudo-Classes"},l=void 0,r={unversionedId:"references/pseudo-classes",id:"references/pseudo-classes",title:"Pseudo-Classes",description:"In addition to CSS's native pseudo-classes, likenth-child(), Stylable enables you to define custom pseudo-classes so that you can apply styles to your components based on state.",source:"@site/docs/references/pseudo-classes.md",sourceDirName:"references",slug:"/references/pseudo-classes",permalink:"/docs/references/pseudo-classes",draft:!1,editUrl:"https://github.com/wixplosives/stylable.io/edit/master/docs/references/pseudo-classes.md",tags:[],version:"current",frontMatter:{id:"pseudo-classes",title:"Pseudo-Classes"},sidebar:"Specification Reference",previous:{title:"Extend Stylable Stylesheet",permalink:"/docs/references/extend-stylesheet"},next:{title:"Pseudo-Classes Parameters",permalink:"/docs/references/state-parameter-types"}},p={},i=[{value:"Define custom pseudo-classes",id:"define-custom-pseudo-classes",level:2},{value:"Simple custom pseudo-classes",id:"simple-custom-pseudo-classes",level:2},{value:"Custom pseudo-classes with parameters",id:"custom-pseudo-classes-with-parameters",level:2},{value:"Mapped states",id:"mapped-states",level:2},{value:"State inheritance",id:"state-inheritance",level:2},{value:"Enable custom pseudo-classes",id:"enable-custom-pseudo-classes",level:2}],c={toc:i};function d(e){let{components:t,...s}=e;return(0,a.kt)("wrapper",(0,n.Z)({},c,s,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"In addition to CSS's native ",(0,a.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en/docs/Web/CSS/Pseudo-classes"},"pseudo-classes"),", like ",(0,a.kt)("inlineCode",{parentName:"p"},":hover")," and ",(0,a.kt)("inlineCode",{parentName:"p"},":nth-child()"),", ",(0,a.kt)("strong",{parentName:"p"},"Stylable")," enables you to define custom pseudo-classes so that you can apply styles to your components based on state."),(0,a.kt)("p",null,"Let's say you want a component to have different styling applied to it when its content is loading. You can define ",(0,a.kt)("inlineCode",{parentName:"p"},"loading")," as a custom pseudo-class and toggle it in your component."),(0,a.kt)("h2",{id:"define-custom-pseudo-classes"},"Define custom pseudo-classes"),(0,a.kt)("p",null,"To define custom pseudo-classes, you use the ",(0,a.kt)("strong",{parentName:"p"},"Stylable")," directive rule ",(0,a.kt)("inlineCode",{parentName:"p"},"-st-states")," to provide a list of the possible custom pseudo-classes that you want to use in the CSS."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"-st-states")," directive rule can be defined only for simple selectors like ",(0,a.kt)("a",{parentName:"p",href:"/docs/references/class-selectors"},"class selector")," and ",(0,a.kt)("a",{parentName:"p",href:"/docs/references/root"},"root"),"."),(0,a.kt)("h2",{id:"simple-custom-pseudo-classes"},"Simple custom pseudo-classes"),(0,a.kt)("p",null,"To define custom pseudo-classes, or states, without parameters, you tell ",(0,a.kt)("strong",{parentName:"p"},"Stylable")," the list of possible custom states that the CSS declaration may be given. You can then target the states in the context of the selector. In this example ",(0,a.kt)("inlineCode",{parentName:"p"},"toggled")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"loading")," are added to the ",(0,a.kt)("inlineCode",{parentName:"p"},"root")," selector and then targeted with different colors. "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-css"},'/* example1.st.css */\n@namespace "Example1";\n.root {\n    -st-states: toggled, loading;\n}\n.root:toggled { color: red; }\n.root:loading { color: green; }\n.root:loading:toggled { color: blue; }\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-css"},"/* CSS output */\n.Example1__root.Example1--toggled { color: red; }\n.Example1__root.Example1--loading { color: green; }\n.Example1__root.Example1--loading.Example1--toggled { color: blue; }\n")),(0,a.kt)("h2",{id:"custom-pseudo-classes-with-parameters"},"Custom pseudo-classes with parameters"),(0,a.kt)("p",null,"To simplify the CSS selector interface, you can also define custom pseudo-classes that accept a parameter. "),(0,a.kt)("p",null,"For example, a cell in a grid can be marked and later targeted using ",(0,a.kt)("inlineCode",{parentName:"p"},"column")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"row")," pseudo-classes."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-css"},".cell {\n    -st-states: column(number), \n                row(number);\n}\n\n.cell:column(1):row(4) {\n    color:red;\n}\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Stylable")," offers a built-in system of ",(0,a.kt)("a",{parentName:"p",href:"/docs/references/state-parameter-types"},"state types")," that provide a better development experience when targeting pseudo-classes. "),(0,a.kt)("h2",{id:"mapped-states"},"Mapped states"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Stylable")," generates custom pseudo-classes using ",(0,a.kt)("inlineCode",{parentName:"p"},"className")," attributes. When you are building your components with ",(0,a.kt)("strong",{parentName:"p"},"Stylable")," the standard DOM implementation is handy, but you might want to target the state in a custom way. "),(0,a.kt)("p",null,"You can use this feature to define custom pseudo-classes even if the existing components you are targeting are not based on ",(0,a.kt)("strong",{parentName:"p"},"Stylable"),". "),(0,a.kt)("p",null,"In this example, ",(0,a.kt)("inlineCode",{parentName:"p"},"toggled")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"loading")," are defined on the root class with their custom implementation. "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-css"},'/* example-custom.st.css */\n@namespace "ExampleCustom";\n.root {\n    -st-states: toggled(".on"), loading("[dataSpinner]");\n}\n.root:toggled { color: red; }\n.root:loading { color: green; }\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-css"},"/* CSS output */\n.ExampleCustom__root.on { color: red; }\n.ExampleCustom__root[dataSpinner] { color: green; }\n")),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"When writing custom mapping, ensure your custom selector targets a simple selector, and not a CSS complex selector.")),(0,a.kt)("h2",{id:"state-inheritance"},"State inheritance"),(0,a.kt)("p",null,"You can extend another imported stylesheet and inherit its custom pseudo-classes. In this example the value ",(0,a.kt)("inlineCode",{parentName:"p"},"Comp1")," is imported from the ",(0,a.kt)("inlineCode",{parentName:"p"},"example1.css")," stylesheet and extended by ",(0,a.kt)("inlineCode",{parentName:"p"},".mediaButton"),". The custom pseudo-classes ",(0,a.kt)("inlineCode",{parentName:"p"},"toggled")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"selected")," are defined to be used on the ",(0,a.kt)("inlineCode",{parentName:"p"},"mediaButton")," component. "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-css"},'/* example2.st.css */\n@namespace "Example2";\n@st-import Comp1 from "./example1.st.css";\n.mediaButton {\n    -st-extends: Comp1;\n    -st-states: toggled, selected;\n}\n.mediaButton:hover { border: 0.2em solid black; } /* native CSS because no custom declaration*/\n.mediaButton:loading { color: silver; } /* from Example1 */\n.mediaButton:selected { color: salmon; } /* from Example2 */\n.mediaButton:toggled { color: gold; } /* included in Example1 but overridden by Example2 */\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-css"},"/* CSS output */\n.Example1__root.Example1--toggled { color: red; }\n.Example1__root.Example1--loading { color: green; }\n.Example2__mediaButton:hover { border: 0.2em solid black; } /* native hover - not declared */\n.Example2__mediaButton.Example1--loading { color: silver; } /* loading scoped to Example1 - only one to declare */\n.Example2__mediaButton.Example2--selected { color: salmon; } /* selected scoped to Example2 - only one to declare */\n.Example2__mediaButton.Example2--toggled { color: gold;} /* toggled scoped to Example2 - last to declare */\n")),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"You can override the behavior of native pseudo-classes. This can enable you to write ",(0,a.kt)("a",{parentName:"p",href:"https://remysharp.com/2010/10/08/what-is-a-polyfill"},"polyfills")," for forthcoming CSS pseudo-classes to ensure that when you define a name for a custom pseudo-class, if there are clashes with a new CSS pseudo-class in the future, your app's behavior does not change. We don't recommend you to override an existing CSS pseudo-class unless you want to drive your teammates insane.")),(0,a.kt)("h2",{id:"enable-custom-pseudo-classes"},"Enable custom pseudo-classes"),(0,a.kt)("p",null,"Custom pseudo-classes are implemented using ",(0,a.kt)("inlineCode",{parentName:"p"},"className")," attributes and need additional runtime logic to control when they are on and off. "),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Stylable")," offers ",(0,a.kt)("a",{parentName:"p",href:"/docs/getting-started/react-integration"},"React CSS state integration")," to help components manage custom pseudo-classes easily."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"/* sample of a stylable component */\nimport { style, classes } from './stylesheet.st.css';\n\nclass MyComponent {\n    render() {\n        return <div className={style(classes.root, { \n                toggled: true,\n                selected: false\n            }, this.props.className) }>\n        </div>\n    }\n}\n")))}d.isMDXComponent=!0}}]);