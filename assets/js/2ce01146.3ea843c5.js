"use strict";(self.webpackChunkstylable_io=self.webpackChunkstylable_io||[]).push([[9169],{7214:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"references/formatters","title":"Formatters","description":"Formatters are functions that return a single CSS declaration value. They can receive arguments, process them and return the value.","source":"@site/docs/references/formatters.md","sourceDirName":"references","slug":"/references/formatters","permalink":"/docs/references/formatters","draft":false,"unlisted":false,"editUrl":"https://github.com/wixplosives/stylable.io/edit/master/docs/references/formatters.md","tags":[],"version":"current","frontMatter":{"id":"formatters","title":"Formatters"},"sidebar":"Specification Reference","previous":{"title":"Scope","permalink":"/docs/references/st-scope"},"next":{"title":"Mixins","permalink":"/docs/references/mixins"}}');var s=t(4848),a=t(8453);const o={id:"formatters",title:"Formatters"},i=void 0,c={},d=[{value:"Formatters with variables",id:"formatters-with-variables",level:2},{value:"Nested formatters",id:"nested-formatters",level:2}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"Formatters are functions that return a single CSS declaration value. They can receive arguments, process them and return the value."}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["Currently, any argument passed through to a formatter is of type ",(0,s.jsx)(n.code,{children:"string"}),". We are in the process of adding support for more complex types."]})}),"\n",(0,s.jsxs)(n.p,{children:["For example a ",(0,s.jsx)(n.code,{children:"calc-font-size"})," formatter can return a different value for the font size depending on the provided argument."]}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:["If you need to return multiple declaration values, we recommend using ",(0,s.jsx)(n.strong,{children:"Stylable"})," ",(0,s.jsx)(n.a,{href:"/docs/references/mixins",children:"mixins"}),"."]})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"/* ./calc-font-size.js */\nmodule.exports = function (baseSize, modifier) {\n  switch (modifier) {\n    case 'header':\n      return `${Number(baseSize) * 2}px`;\n    case 'aside':\n      return `${Number(baseSize) * 0.75}px`;\n    default:\n      return baseSize + 'px';\n  }\n};\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",children:'@st-import calcFontSize from "./calc-font-size";\n\n.header {\n  font-size: calcFontSize(16, header);\n}\n\n.form {\n  font-size: calcFontSize(16, body);\n}\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",children:"/* CSS output */\n.header {\n  font-size: 32px;\n}\n\n.form {\n  font-size: 16px;\n}\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",children:"/* CSS output */\n.header {\n  font-size: 32px;\n}\n\n.form {\n  font-size: 16px;\n}\n"})}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsx)(n.p,{children:"Currently you cannot use formatters inside a native URL function. As a suggested workaround, you can return a URL function from a formattter."})}),"\n",(0,s.jsx)(n.h2,{id:"formatters-with-variables",children:"Formatters with variables"}),"\n",(0,s.jsxs)(n.p,{children:["When the formatter is imported into the CSS, it can also be used with a ",(0,s.jsx)(n.a,{href:"/docs/references/st-variables",children:"variable"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["In this example the CSS imports the same formatter as the previous example, ",(0,s.jsx)(n.code,{children:"calc-font-size"}),", but the variable ",(0,s.jsx)(n.code,{children:"baseFontSize"})," is added to the calculation."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",children:'@st-import calcFontSize from "./calc-font-size";\n\n:vars {\n  baseFontSize: 12;\n}\n\n.header {\n  font-size: calcFontSize(value(baseFontSize), header);\n}\n\n.form {\n  font-size: calcFontSize(value(baseFontSize), body);\n}\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",children:"/* CSS output */\n.header {\n  font-size: 24px;\n}\n.form {\n  font-size: 12px;\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"nested-formatters",children:"Nested formatters"}),"\n",(0,s.jsx)(n.p,{children:"You can also nest formatters to provide functions that are modular, composable and reusable."}),"\n",(0,s.jsxs)(n.p,{children:["In this example the formatter ",(0,s.jsx)(n.code,{children:"divBy2"})," is nested in the ",(0,s.jsx)(n.code,{children:"round"})," formatter. Both are imported into the CSS file and the output value is calculated from both. The formatters expose to the CSS mathematical calculations that are used in the JavaScript functions."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"/* ./math.js */\nmodule.export = {\n  divBy2: function (num) {\n    return Number(Number(num) / 2);\n  },\n  round: function (num) {\n    return Math.round(Number(num));\n  },\n};\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",children:'@st-import [divBy2, round] from "./math";\n\n:vars {\n  baseSize: 17px;\n}\n\n.header {\n  font-size: round(divBy2(value(baseSize))) px;\n}\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",children:"/* CSS output */\n.header {\n  font-size: 9px;\n}\n"})})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>i});var r=t(6540);const s={},a=r.createContext(s);function o(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);