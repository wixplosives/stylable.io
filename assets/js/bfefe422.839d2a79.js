"use strict";(self.webpackChunkstylable_io=self.webpackChunkstylable_io||[]).push([[693],{5967:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"references/css-vars","title":"Custom Property","description":"CSS custom property is used to define and re-use variables that participate in the cascade, and to dynamically change their values at runtime.","source":"@site/docs/references/css-vars.md","sourceDirName":"references","slug":"/references/css-vars","permalink":"/docs/references/css-vars","draft":false,"unlisted":false,"editUrl":"https://github.com/wixplosives/stylable.io/edit/master/docs/references/css-vars.md","tags":[],"version":"current","frontMatter":{"id":"css-vars","title":"Custom Property"},"sidebar":"Specification Reference","previous":{"title":"Containers","permalink":"/docs/references/contains"},"next":{"title":"Keyframes","permalink":"/docs/references/keyframes"}}');var i=r(4848),s=r(8453);const a={id:"css-vars",title:"Custom Property"},o=void 0,l={},c=[{value:"syntax",id:"syntax",level:2},{value:"Get / Set",id:"get--set",level:3},{value:"Runtime definition",id:"runtime-definition",level:3},{value:"Build only definition",id:"build-only-definition",level:3},{value:"Comparison to build vars",id:"comparison-to-build-vars",level:2},{value:"Import and Export",id:"import-and-export",level:2},{value:"Runtime",id:"runtime",level:2},{value:"Namespace",id:"namespace",level:2},{value:"Disable namespace",id:"disable-namespace",level:3}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["CSS ",(0,i.jsx)(n.code,{children:"custom property"})," is used to define and re-use variables that participate in the cascade, and to dynamically change their values at runtime."]}),"\n",(0,i.jsxs)(n.p,{children:["This page goes over how Stylable handles ",(0,i.jsx)(n.code,{children:"custom properties"}),", for more details about the language feature itself, checkout the following resources:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/--*",children:"MDN custom properties"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/@property",children:"MDN @property"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/var",children:"MDN var()"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_variables",children:"MDN - Using CSS custom properties"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://drafts.csswg.org/css-variables/",children:"Custom properties in spec"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://www.smashingmagazine.com/2017/04/start-using-css-custom-properties/",children:"Smashing Magazine - It's Time To Start Using CSS Custom Properties"})}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"syntax",children:"syntax"}),"\n",(0,i.jsxs)(n.p,{children:["A CSS custom property name must start with the ",(0,i.jsx)(n.code,{children:"--"})," prefix."]}),"\n",(0,i.jsx)(n.h3,{id:"get--set",children:"Get / Set"}),"\n",(0,i.jsxs)(n.p,{children:["A custom property can be referenced from a ",(0,i.jsx)(n.code,{children:"declaration property"})," or within a value ",(0,i.jsx)(n.code,{children:"var()"})," call:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-css",children:".a {\n  /* set */\n  --x: green;\n}\n.a .b {\n  /* get */\n  color: var(--x);\n}\n.b {\n  /* fallback to yellow if property is unset */\n  color: var(--notSet, yellow);\n\n  /* fallback to --x if property is unset */\n  color: var(--notSet, var(--x));\n}\n"})}),"\n",(0,i.jsx)(n.admonition,{title:"no explicit definition",type:"note",children:(0,i.jsxs)(n.p,{children:["A custom property can be set and used without an explicit ",(0,i.jsx)(n.code,{children:"@property"})," definition"]})}),"\n",(0,i.jsx)(n.h3,{id:"runtime-definition",children:"Runtime definition"}),"\n",(0,i.jsxs)(n.p,{children:["Use ",(0,i.jsx)(n.code,{children:"@property"})," at-rule to register a configuration for a runtime property:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-css",children:"/* runtime type definition */\n@property --x {\n  syntax: '<color>';     /* type */\n  inherits: true;        /* is taken from cascade */\n  initial-value: green;  /* default when unset */\n}\n\n.b {\n  /* get green from initial value\n     if --x is unset */\n  color: var(--x);\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"build-only-definition",children:"Build only definition"}),"\n",(0,i.jsxs)(n.p,{children:["To define a custom property to be used outside of a stylesheet, without explicitly registering its runtime type or using it as a declaration property or value, you can define the ",(0,i.jsx)(n.code,{children:"@property"})," at-rule without a body:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-css",children:"@property --x;\n"})}),"\n",(0,i.jsx)(n.admonition,{title:"removed at build",type:"info",children:(0,i.jsxs)(n.p,{children:["A property with no configuration body is removed at ",(0,i.jsx)(n.code,{children:"build-time"})," as it serves no purpose during ",(0,i.jsx)(n.code,{children:"runtime"})]})}),"\n",(0,i.jsx)(n.h2,{id:"comparison-to-build-vars",children:"Comparison to build vars"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"/docs/references/st-variables",children:"Stylable variables"})," (build vars) and CSS custom properties offer different capabilities, and as such serve different use-cases."]}),"\n",(0,i.jsx)(n.p,{children:"Stylable variables exist only in your source code, and get replaced during build. They serve well for calculations that are not supported by native CSS, reducing code repetition, increasing readability and can benefit any static theme or styling without incurring any runtime performance cost."}),"\n",(0,i.jsx)(n.p,{children:"CSS custom properties on the other hand do incur a very small runtime cost, but offer the ability to override their values during runtime, allowing for native CSS dynamic styling."}),"\n",(0,i.jsx)(n.h2,{id:"import-and-export",children:"Import and Export"}),"\n",(0,i.jsxs)(n.p,{children:["An exported custom-property can be imported into another stylesheet with the ",(0,i.jsx)(n.a,{href:"/docs/references/imports#named-import",children:"@st-import"})," at-rule."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-css",children:"@st-import [--x] from \"./common.st.css\";\n\n.a {\n  /* get --x value */\n  color: var(--x);\n}\n\n.b {\n  /* set/override --x value */\n  --x: gold;\n\n  /* get override 'gold' value */\n  background-color: var(--x); /* gold */\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"runtime",children:"Runtime"}),"\n",(0,i.jsx)(n.p,{children:"A custom property can be used dynamically in JavaScript."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-css",metastring:'title="comp.st.css"',children:"@property --x;\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",metastring:'title="comp.jsx"',children:"import { vars } from './comp.st.css';\n\n/* inline style set property value */\n<div style={{ [vars.x]: 'pink' }} />;\n"})}),"\n",(0,i.jsx)(n.h2,{id:"namespace",children:"Namespace"}),"\n",(0,i.jsx)(n.p,{children:"Stylable automatically namespace any CSS custom property name according to the stylesheet it is defined in."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-css",children:"@property --x {\n  syntax: '<color>';\n  inherits: true;\n  initial-value: green;\n}\n.a {\n  --x: var(--x);\n}\n\n/* OUTPUT */\n@property --NAMESPACE-x {\n  syntax: '<color>';\n  inherits: true;\n  initial-value: green;\n}\n.NAMESPACE__a {\n  --NAMESPACE-x: var(--NAMESPACE-x);\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"disable-namespace",children:"Disable namespace"}),"\n",(0,i.jsxs)(n.p,{children:["In cases where the default namespace behavior is not wanted, ",(0,i.jsx)(n.code,{children:"st-global"})," can be used to mark a custom property definition as global."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-css",children:"@property st-global(--x) {\n  syntax: '<color>';\n  inherits: true;\n  initial-value: green;\n}\n\n.a {\n  --x: var(--x);\n}\n\n/* OUTPUT */\n@property --x {\n  syntax: '<color>';\n  inherits: true;\n  initial-value: green;\n}\n\n.NAMESPACE__a {\n  --x: var(--x);\n}\n"})})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>o});var t=r(6540);const i={},s=t.createContext(i);function a(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);