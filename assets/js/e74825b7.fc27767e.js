"use strict";(self.webpackChunkstylable_io=self.webpackChunkstylable_io||[]).push([[8044],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>c});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=a.createContext({}),p=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(i.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,s=e.originalType,i=e.parentName,u=r(e,["components","mdxType","originalType","parentName"]),m=p(n),c=o,g=m["".concat(i,".").concat(c)]||m[c]||d[c]||s;return n?a.createElement(g,l(l({ref:t},u),{},{components:n})):a.createElement(g,l({ref:t},u))}));function c(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=n.length,l=new Array(s);l[0]=m;var r={};for(var i in t)hasOwnProperty.call(t,i)&&(r[i]=t[i]);r.originalType=e,r.mdxType="string"==typeof e?e:o,l[1]=r;for(var p=2;p<s;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3143:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>d,frontMatter:()=>s,metadata:()=>r,toc:()=>p});var a=n(7462),o=(n(7294),n(3905));const s={id:"pseudo-classes",title:"Pseudo-Class"},l=void 0,r={unversionedId:"references/pseudo-classes",id:"references/pseudo-classes",title:"Pseudo-Class",description:"In addition to CSS's native pseudo-classes, likenth-child(), Stylable enables you to define custom pseudo-classes so that you can apply styles to your components based on state.",source:"@site/docs/references/pseudo-classes.md",sourceDirName:"references",slug:"/references/pseudo-classes",permalink:"/docs/references/pseudo-classes",draft:!1,editUrl:"https://github.com/wixplosives/stylable.io/edit/master/docs/references/pseudo-classes.md",tags:[],version:"current",frontMatter:{id:"pseudo-classes",title:"Pseudo-Class"},sidebar:"Specification Reference",previous:{title:"Element Type Selector",permalink:"/docs/references/tag-selectors"},next:{title:"Pseudo-Element",permalink:"/docs/references/pseudo-elements"}},i={},p=[{value:"Define a custom pseudo-class",id:"define-a-custom-pseudo-class",level:2},{value:"Boolean",id:"boolean",level:2},{value:"With Parameter",id:"with-parameter",level:2},{value:"Enum",id:"enum",level:3},{value:"String",id:"string",level:3},{value:"String validation optional",id:"string-validation-optional",level:4},{value:"Number",id:"number",level:3},{value:"Number validation optional",id:"number-validation-optional",level:4},{value:"Mapped",id:"mapped",level:2},{value:"State inheritance",id:"state-inheritance",level:2},{value:"Runtime control",id:"runtime-control",level:2}],u={toc:p};function d(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"In addition to CSS's native ",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en/docs/Web/CSS/Pseudo-classes"},"pseudo-classes"),", like ",(0,o.kt)("inlineCode",{parentName:"p"},":hover")," and ",(0,o.kt)("inlineCode",{parentName:"p"},":nth-child()"),", ",(0,o.kt)("strong",{parentName:"p"},"Stylable")," enables you to define custom pseudo-classes so that you can apply styles to your components based on state."),(0,o.kt)("p",null,"Let's say you want a component to have different styling applied to it when its content is loading. You can define ",(0,o.kt)("inlineCode",{parentName:"p"},"loading")," as a custom pseudo-class and toggle it in your component."),(0,o.kt)("h2",{id:"define-a-custom-pseudo-class"},"Define a custom pseudo-class"),(0,o.kt)("p",null,"To define custom pseudo-classes, you use the ",(0,o.kt)("strong",{parentName:"p"},"Stylable")," directive rule ",(0,o.kt)("inlineCode",{parentName:"p"},"-st-states")," to provide a list of the possible custom pseudo-classes that you want to use in the CSS."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"-st-states")," directive rule can be defined only for simple selectors like ",(0,o.kt)("a",{parentName:"p",href:"/docs/references/class-selectors"},"class selector")," and ",(0,o.kt)("a",{parentName:"p",href:"/docs/references/root"},"root"),"."),(0,o.kt)("h2",{id:"boolean"},"Boolean"),(0,o.kt)("p",null,"To define custom pseudo-classes, or states, without parameters, you tell ",(0,o.kt)("strong",{parentName:"p"},"Stylable")," the list of possible custom states that the CSS declaration may be given. You can then target the states in the context of the selector. In this example ",(0,o.kt)("inlineCode",{parentName:"p"},"toggled")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"loading")," are added to the ",(0,o.kt)("inlineCode",{parentName:"p"},"root")," selector and then targeted with different colors."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-css"},'/* example1.st.css */\n@namespace "Example1";\n.root {\n  -st-states: toggled, loading;\n}\n.root:toggled {\n  color: red;\n}\n.root:loading {\n  color: green;\n}\n.root:loading:toggled {\n  color: blue;\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-css"},"/* CSS output */\n.Example1__root.Example1--toggled {\n  color: red;\n}\n.Example1__root.Example1--loading {\n  color: green;\n}\n.Example1__root.Example1--loading.Example1--toggled {\n  color: blue;\n}\n")),(0,o.kt)("h2",{id:"with-parameter"},"With Parameter"),(0,o.kt)("p",null,"When defining a custom pseudo-class with a parameter:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"You must provide a type definition."),(0,o.kt)("li",{parentName:"ul"},"Optionally you can provide validation arguments to the type defined"),(0,o.kt)("li",{parentName:"ul"},"Optionally you can provide each state definition with a ",(0,o.kt)("inlineCode",{parentName:"li"},"default value"),", enabling it to be used without providing a parameter argument.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-css"},'.root {\n  -st-states: stateX([type]) [default Value?], stateY([type]) [default Value?];\n}\n\n.root:statex(arg) {\n}\n\n.root:statex {\n  /* parameter resolves to "default Value", \n    if no default value was provided,\n    this will fail validation */\n}\n')),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"When defining a ",(0,o.kt)("inlineCode",{parentName:"p"},"default value"),", you can use ",(0,o.kt)("a",{parentName:"p",href:"/docs/references/st-variables"},"variables")," and ",(0,o.kt)("a",{parentName:"p",href:"/docs/references/formatters"},"formatters"),".")),(0,o.kt)("h3",{id:"enum"},"Enum"),(0,o.kt)("p",null,"You can define a custom state with possible ",(0,o.kt)("strong",{parentName:"p"},"enum value")," options, and then target one of the options using a pseudo-class selector with a matching ",(0,o.kt)("strong",{parentName:"p"},"string argument"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-css"},'.root {\n  /* define the custom state "size" */\n  -st-states: size(enum(small, medium, large));\n}\n\n.root:size(medium) {\n  /* target an element with a state value of "medium" */\n}\n\n.root:size(huge) {\n  /* invalid because "huge" is not a one of the possible \n   values defined for the state "size" */\n}\n')),(0,o.kt)("p",null,"Setting the state's ",(0,o.kt)("strong",{parentName:"p"},"enum value")," in the view ",(0,o.kt)("inlineCode",{parentName:"p"},'<span className={style(classes.root, {size: "medium"})}>')," resolves to ",(0,o.kt)("inlineCode",{parentName:"p"},'<span className="style--size-medium" />'),"."),(0,o.kt)("h3",{id:"string"},"String"),(0,o.kt)("p",null,"You can define a custom state with a ",(0,o.kt)("strong",{parentName:"p"},"string value"),", and then target it using a pseudo-class selector with a matching ",(0,o.kt)("strong",{parentName:"p"},"string argument"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-css"},'.root {\n  /* define the "selected" custom state with a string parameter type */\n  -st-states: selected(string);\n}\n\n.root:selected(username) {\n  /* target an element with a state value that \n    is exactly the string argument "username" */\n}\n')),(0,o.kt)("p",null,"Setting the state ",(0,o.kt)("strong",{parentName:"p"},"string value")," in the view ",(0,o.kt)("inlineCode",{parentName:"p"},'<span className={style(classes.root, {selected: "username"})}>')," resolves to ",(0,o.kt)("inlineCode",{parentName:"p"},'<span className="style--selected-username" />'),"."),(0,o.kt)("h4",{id:"string-validation-optional"},"String validation ","[optional]"),(0,o.kt)("p",null,"You can optionally pass a regular expression string as an argument to add validation for the pseudo-class selector ",(0,o.kt)("strong",{parentName:"p"},"string argument"),". The regular expression must be within quotes."),(0,o.kt)("p",null,"You can optionally pass a regular expression function (",(0,o.kt)("inlineCode",{parentName:"p"},"regex()"),") to the string type to add regular expression validation for the pseudo-class selector.\nThis function accepts a single expression to be tested against the selector parameter. The expression must be within quotes."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-css"},'.root {\n  /* validates that the targeting string argument begins with "user" */\n  -st-states: selected(string(regex("^user")));\n}\n\n/* a valid argument */\n.root:selected(username) {\n}\n\n/* invalid because it doesn\'t match the regular expression "^user" */\n.root:selected(index) {\n}\n')),(0,o.kt)("p",null,"String type can also accept several other validations, including ",(0,o.kt)("inlineCode",{parentName:"p"},"minLength(number)"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"maxLength(number)")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"contains(string)"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-css"},".root {\n  /* validates the targeting string arguments with multiple validations */\n  -st-states: selected(string(minLength(2), maxLength(10), contains(user)));\n}\n\n/* valid argument */\n.root:selected(username) {\n}\n\n/* invalid due to minLength(2) & contains(user) */\n.root:selected(x) {\n}\n")),(0,o.kt)("h3",{id:"number"},"Number"),(0,o.kt)("p",null,"You can define a custom state with a ",(0,o.kt)("strong",{parentName:"p"},"number value"),", and then target it using a pseudo-class selector with a matching ",(0,o.kt)("strong",{parentName:"p"},"number argument"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-html"},'<span data-column="5" />\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-css"},'.root {\n  /* define the custom pseudo-class "column" */\n  -st-states: column(number);\n}\n\n.root:column(5) {\n  /* target an element with a state value that is exactly the number argument "5" */\n}\n')),(0,o.kt)("p",null,"Setting the state ",(0,o.kt)("strong",{parentName:"p"},"number value")," in the view ",(0,o.kt)("inlineCode",{parentName:"p"},"<span className={style(classes.root, {column: 5})}>")," resolves to ",(0,o.kt)("inlineCode",{parentName:"p"},'<span className="style---column-1-5" />'),"."),(0,o.kt)("h4",{id:"number-validation-optional"},"Number validation ","[optional]"),(0,o.kt)("p",null,"You can use several validators that the number type provides."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-css"},'.root {\n  /* validates the targeting number argument */\n  -st-states: column(number(min(2), max(6), multipleOf(2)));\n}\n\n/* valid arguments */\n.root:column(2),\n.root:column(4),\n.root:column(6) {\n}\n\n/* invalid because not a "multipleOf(2)" */\n.root:column(3),\n.root:column(5) {\n}\n\n/* invalid because of "min(2)" and "max(6)" validations */\n.root:column(1),\n.root:column(7) {\n}\n')),(0,o.kt)("h2",{id:"mapped"},"Mapped"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Stylable")," generates custom pseudo-classes using ",(0,o.kt)("inlineCode",{parentName:"p"},"className")," attributes. When you are building your components with ",(0,o.kt)("strong",{parentName:"p"},"Stylable")," the standard DOM implementation is handy, but you might want to target the state in a custom way."),(0,o.kt)("p",null,"You can use this feature to define custom pseudo-classes even if the existing components you are targeting are not based on ",(0,o.kt)("strong",{parentName:"p"},"Stylable"),"."),(0,o.kt)("p",null,"In this example, ",(0,o.kt)("inlineCode",{parentName:"p"},"toggled")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"loading")," are defined on the root class with their custom implementation."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-css"},'/* example-custom.st.css */\n@namespace "ExampleCustom";\n.root {\n  -st-states: toggled(".on"), loading("[dataSpinner]");\n}\n.root:toggled {\n  color: red;\n}\n.root:loading {\n  color: green;\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-css"},"/* CSS output */\n.ExampleCustom__root.on {\n  color: red;\n}\n.ExampleCustom__root[dataSpinner] {\n  color: green;\n}\n")),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"When writing custom mapping, ensure your custom selector targets a simple selector, and not a CSS complex selector.")),(0,o.kt)("h2",{id:"state-inheritance"},"State inheritance"),(0,o.kt)("p",null,"You can extend another imported stylesheet and inherit its custom pseudo-classes. In this example the value ",(0,o.kt)("inlineCode",{parentName:"p"},"Comp1")," is imported from the ",(0,o.kt)("inlineCode",{parentName:"p"},"example1.css")," stylesheet and extended by ",(0,o.kt)("inlineCode",{parentName:"p"},".mediaButton"),". The custom pseudo-classes ",(0,o.kt)("inlineCode",{parentName:"p"},"toggled")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"selected")," are defined to be used on the ",(0,o.kt)("inlineCode",{parentName:"p"},"mediaButton")," component."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-css"},'/* example2.st.css */\n@namespace "Example2";\n@st-import Comp1 from "./example1.st.css";\n.mediaButton {\n  -st-extends: Comp1;\n  -st-states: toggled, selected;\n}\n.mediaButton:hover {\n  border: 0.2em solid black;\n} /* native CSS because no custom declaration*/\n.mediaButton:loading {\n  color: silver;\n} /* from Example1 */\n.mediaButton:selected {\n  color: salmon;\n} /* from Example2 */\n.mediaButton:toggled {\n  color: gold;\n} /* included in Example1 but overridden by Example2 */\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-css"},"/* CSS output */\n.Example1__root.Example1--toggled {\n  color: red;\n}\n.Example1__root.Example1--loading {\n  color: green;\n}\n.Example2__mediaButton:hover {\n  border: 0.2em solid black;\n} /* native hover - not declared */\n.Example2__mediaButton.Example1--loading {\n  color: silver;\n} /* loading scoped to Example1 - only one to declare */\n.Example2__mediaButton.Example2--selected {\n  color: salmon;\n} /* selected scoped to Example2 - only one to declare */\n.Example2__mediaButton.Example2--toggled {\n  color: gold;\n} /* toggled scoped to Example2 - last to declare */\n")),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"You can override the behavior of native pseudo-classes. This can enable you to write ",(0,o.kt)("a",{parentName:"p",href:"https://remysharp.com/2010/10/08/what-is-a-polyfill"},"polyfills")," for forthcoming CSS pseudo-classes to ensure that when you define a name for a custom pseudo-class, if there are clashes with a new CSS pseudo-class in the future, your app's behavior does not change. We don't recommend you to override an existing CSS pseudo-class unless you want to drive your teammates insane.")),(0,o.kt)("h2",{id:"runtime-control"},"Runtime control"),(0,o.kt)("p",null,"Custom pseudo-classes are implemented using ",(0,o.kt)("inlineCode",{parentName:"p"},"className")," attributes and need additional runtime logic to control when they are on and off."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Stylable")," offers ",(0,o.kt)("a",{parentName:"p",href:"/docs/getting-started/react-integration"},"React CSS state integration")," to help components manage custom pseudo-classes easily."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'/* sample of a stylable component */\nimport { style, classes } from "./stylesheet.st.css";\n\nclass MyComponent {\n  render() {\n    return (\n      <div\n        className={style(\n          classes.root,\n          {\n            toggled: true,\n            selected: false,\n          },\n          this.props.className\n        )}\n      ></div>\n    );\n  }\n}\n')))}d.isMDXComponent=!0}}]);