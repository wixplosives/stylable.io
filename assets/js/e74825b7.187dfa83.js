"use strict";(self.webpackChunkstylable_io=self.webpackChunkstylable_io||[]).push([[8044],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,s=function(e,t){if(null==e)return{};var n,a,s={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,s=e.mdxType,o=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=p(n),m=s,g=d["".concat(l,".").concat(m)]||d[m]||c[m]||o;return n?a.createElement(g,r(r({ref:t},u),{},{components:n})):a.createElement(g,r({ref:t},u))}));function m(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var o=n.length,r=new Array(o);r[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:s,r[1]=i;for(var p=2;p<o;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3143:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>c,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var a=n(7462),s=(n(7294),n(3905));const o={id:"pseudo-classes",title:"Pseudo-Class"},r=void 0,i={unversionedId:"references/pseudo-classes",id:"references/pseudo-classes",title:"Pseudo-Class",description:"In addition to CSS's native pseudo-classes, likenth-child(), Stylable allow you to define custom pseudo-classes so that you can apply styles to your components based on state. Let's say you want a component to have different styling applied to it when its content is loading. You can define loading as a custom pseudo-class and toggle it in your component.",source:"@site/docs/references/pseudo-classes.md",sourceDirName:"references",slug:"/references/pseudo-classes",permalink:"/docs/references/pseudo-classes",draft:!1,editUrl:"https://github.com/wixplosives/stylable.io/edit/master/docs/references/pseudo-classes.md",tags:[],version:"current",frontMatter:{id:"pseudo-classes",title:"Pseudo-Class"},sidebar:"Specification Reference",previous:{title:"Layer",permalink:"/docs/references/layer"},next:{title:"Pseudo-Element",permalink:"/docs/references/pseudo-elements"}},l={},p=[{value:"Syntax",id:"syntax",level:2},{value:"Boolean",id:"boolean",level:3},{value:"Enum",id:"enum",level:3},{value:"String",id:"string",level:3},{value:"Optional string validation",id:"optional-string-validation",level:4},{value:"Number",id:"number",level:3},{value:"Optional number validation",id:"optional-number-validation",level:4},{value:"State inheritance",id:"state-inheritance",level:2},{value:"Runtime",id:"runtime",level:2},{value:"Namespace",id:"namespace",level:2},{value:"Map to selector",id:"map-to-selector",level:3}],u={toc:p};function c(e){let{components:t,...n}=e;return(0,s.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"In addition to CSS's native ",(0,s.kt)("inlineCode",{parentName:"p"},"pseudo-classes"),", like ",(0,s.kt)("inlineCode",{parentName:"p"},":hover")," and ",(0,s.kt)("inlineCode",{parentName:"p"},":nth-child()"),", Stylable allow you to define custom pseudo-classes so that you can apply styles to your components based on state. Let's say you want a component to have different styling applied to it when its content is loading. You can define ",(0,s.kt)("inlineCode",{parentName:"p"},"loading")," as a custom pseudo-class and toggle it in your component."),(0,s.kt)("p",null,"This page goes over how Stylable handles custom ",(0,s.kt)("inlineCode",{parentName:"p"},"pseudo-classes"),", for more details about the language feature itself, checkout the following resources:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en/docs/Web/CSS/Pseudo-classes"},"MDN pseudo-class")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://drafts.csswg.org/selectors/#pseudo-classes"},"pseudo-class in spec"))),(0,s.kt)("h2",{id:"syntax"},"Syntax"),(0,s.kt)("p",null,"The Stylable ",(0,s.kt)("inlineCode",{parentName:"p"},"-st-states")," declaration is used ",(0,s.kt)("strong",{parentName:"p"},"on a class selector")," to provide a list of the possible custom ",(0,s.kt)("inlineCode",{parentName:"p"},"pseudo-classes")," that can later be targeted from CSS and controlled from JavaScript."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-css",metastring:'title="list of custom states"',title:'"list',of:!0,custom:!0,'states"':!0},".x {\n  -st-states: stateA, stateB;\n}\n")),(0,s.kt)("admonition",{title:"allowed context",type:"note"},(0,s.kt)("p",{parentName:"admonition"},(0,s.kt)("inlineCode",{parentName:"p"},"-st-states")," is only allowed in a rule with a ",(0,s.kt)("strong",{parentName:"p"},"single class selector")," to indicate custom pseudo classes for that class.")),(0,s.kt)("h3",{id:"boolean"},"Boolean"),(0,s.kt)("p",null,"To define a custom state that can be either ",(0,s.kt)("strong",{parentName:"p"},"on or off"),", provide state definitions with a single ident as the name for the state, then target the state using a pseudo-class."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-css"},".x {\n  /* define 2 boolean states on 'x' */\n  -st-states: toggled, loading;\n}\n\n/* target single custom state */\n.x:toggled {}\n\n/* target multiple custom states */\n.x:toggled:loading {}\n")),(0,s.kt)("h3",{id:"enum"},"Enum"),(0,s.kt)("p",null,"A custom state with a ",(0,s.kt)("strong",{parentName:"p"},"restricted option list")," that can target one of the options using a pseudo-class selector with a matching parameter and an ",(0,s.kt)("strong",{parentName:"p"},"optional default value"),"."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-css"},".x {\n  /* define a 'size' custom state with 3 options \n     and a 'color' state with options and a default 'green' value */\n  -st-states: size(enum(small, medium, large)),\n              color(enum(reg, green, blue)) green;\n}\n\n/* target an element with a size of `medium` */\n.x:size(medium) {}\n\n/* INVALID! - 'huge' is not a possible value for size */\n.x:size(huge) {}\n\n/* INVALID! - parameter is required for size */\n.x:size {}\n\n/* VALID! - same as ':color(green)' */\n.x:color {}\n")),(0,s.kt)("h3",{id:"string"},"String"),(0,s.kt)("p",null,"A custom state that can accept a ",(0,s.kt)("inlineCode",{parentName:"p"},"string parameter")," value."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-css"},".x {\n  /* define 'category' custom state that accepts a string parameter */\n  -st-states: category(string);\n}\n\n/* target an element with state category='kitchen' */\n.x:category(kitchen) {}\n\n/* target an element with state category='office' */\n.x:category(office) {}\n")),(0,s.kt)("h4",{id:"optional-string-validation"},"Optional string validation"),(0,s.kt)("p",null,"There are several options that can be used to validate the potential string parameter input:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"minLength")," - validates min length of input"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"maxLength")," - validates max length of input"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"contains")," - validates substring value exist in input"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"regex")," - validates input against a regular expression")),(0,s.kt)("p",null,"To set validations on a string state type, call the string as a function and pass a list of validations."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-css",metastring:'title="string validation definition examples"',title:'"string',validation:!0,definition:!0,'examples"':!0},".a { \n  /* validates input has min/max length and has the string 'user' in it */\n  -st-states: x(string(minLength(5), maxLength(10), contains('user')));\n}\n\n.b {\n  /* validates input begins with 'user' */\n  -st-states: x(string(regex('^user')));\n}\n")),(0,s.kt)("h3",{id:"number"},"Number"),(0,s.kt)("p",null,"A custom state that can accept a ",(0,s.kt)("inlineCode",{parentName:"p"},"number parameter")," value."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-css"},".a {\n  /* define 'ranking' custom state that accepts a number parameter */\n  -st-states: ranking(number);\n}\n\n/* target an element with a state rankin='5' */\n.a:ranking(5) {}\n")),(0,s.kt)("h4",{id:"optional-number-validation"},"Optional number validation"),(0,s.kt)("p",null,"There are several options that can be used to validate the potential number parameter input:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"min")," - validates min size of input"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"max")," - validates max size of input"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"multiplyOf")," - validates input is multiply of a given value")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-css",metastring:'title="number validation definition example"',title:'"number',validation:!0,definition:!0,'example"':!0},'.a {\n  /* validates the targeting number argument */\n  -st-states: x(number(min(2), max(6), multipleOf(2)));\n}\n\n/* valid arguments */\n.a:x(2) {}\n.a:x(4) {}\n.a:x(6) {}\n\n/* INVALID! - "multipleOf(2)" */\n.a:x(3) {}\n.a:x(5) {}\n\n/* INVALID! - "min(2)" and "max(6)" */\n.a:x(1) {}\n.a:x(7) {}\n')),(0,s.kt)("h2",{id:"state-inheritance"},"State inheritance"),(0,s.kt)("p",null,"When using ",(0,s.kt)("a",{parentName:"p",href:"./extend-stylesheet"},"-st-extends")," to extend another stylesheet or class, states definitions are inherited, but can also be overridden at any level."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-css",metastring:'title="base.st.css"',title:'"base.st.css"'},".root {\n  /* define states 'a' and 'b' for the root of base stylesheet */\n  -st-states: a, b;\n}\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-css",metastring:'title="extend.st.css"',title:'"extend.st.css"'},"@st-import Base from './base.st.css';\n\n.root {\n  /* inherits states 'a' and 'b' */\n  -st-extends: Base;\n\n  /* define states 'c' and 'b' (override 'b' from 'Base') */\n  -st-states: c, b;\n}\n\n.root:a {}\n.root:b {}\n.root:c {}\n\n/* OUTPUT */\n.extend__root.base--a {}   /* 'a' defined in base */\n.extend__root.extend--b {} /* 'b' defined in base, but overridden in extend */\n.extend__root.extend--c {} /* 'c' defined in extend */\n")),(0,s.kt)("admonition",{title:"Native pseudo-class override",type:"note"},(0,s.kt)("p",{parentName:"admonition"},"You can override the behavior of native pseudo-classes. This can enable you to write ",(0,s.kt)("a",{parentName:"p",href:"https://remysharp.com/2010/10/08/what-is-a-polyfill"},"polyfills")," for forthcoming CSS pseudo-classes to ensure that when you define a name for a custom pseudo-class, if there are clashes with a new CSS pseudo-class in the future, your app's behavior does not change. We don't recommend you to override an existing CSS pseudo-class unless you want to drive your teammates insane.")),(0,s.kt)("h2",{id:"runtime"},"Runtime"),(0,s.kt)("p",null,"To activate a custom state, use the ",(0,s.kt)("a",{parentName:"p",href:"./runtime#custom-state-mapping"},"cssStates")," or ",(0,s.kt)("a",{parentName:"p",href:"./runtime#st-function"},"st() function")," to generate the active ",(0,s.kt)("inlineCode",{parentName:"p"},"CSS classes")," states."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import { st, classes } from './sheet.st.css'; \n\n// active states\nst(classes.part, {\n  isOn: true,      // boolean\n  size: 'small'    // string or enum\n  place: 1         // number state\n});\n\n// un-active states - only 'part' class\nst(classes.part, {\n  isFirst: false,  // boolean\n  size: undefined  // string or enum\n  place: undefined // number\n});\n")),(0,s.kt)("h2",{id:"namespace"},"Namespace"),(0,s.kt)("p",null,"Stylable generates namespaced CSS classes for custom states:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-css"},".x:bool {}\n.x:enum(option1) {}\n.x:string(word) {}\n.x:number(55) {}\n\n/* OUTPUT */\n.NAMESPACE__x.NAMESPACE--bool {}\n.NAMESPACE__x.NAMESPACE---enum-7-option1 {}\n.NAMESPACE__x.NAMESPACE---string-4-word {}\n.NAMESPACE__x.NAMESPACE---number-2-55 {}\n")),(0,s.kt)("h3",{id:"map-to-selector"},"Map to selector"),(0,s.kt)("p",null,"In some cases the default way Stylable transforms a state into a class is not the desired behavior, for example when writing style interface to an external view that might mark state as an attribute, For this ",(0,s.kt)("inlineCode",{parentName:"p"},"mapped state")," can be used to transform the state into a another selector."),(0,s.kt)("p",null,"To define a global mapped state, pass a selector as a string instead of a type:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-css"},".x {\n  -st-states: toggled('.on'), \n              loading('[dataSpinner]');\n}\n\n.x:toggled {}\n.x:loading {}\n\n/* OUTPUT */\n.NAMESPACE__x.on {}\n.NAMESPACE__x[dataSpinner] {}\n")))}c.isMDXComponent=!0}}]);