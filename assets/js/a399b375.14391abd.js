"use strict";(self.webpackChunkstylable_io=self.webpackChunkstylable_io||[]).push([[2919],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=i.createContext({}),p=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=p(e.components);return i.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=p(n),g=a,y=u["".concat(l,".").concat(g)]||u[g]||d[g]||r;return n?i.createElement(y,s(s({ref:t},c),{},{components:n})):i.createElement(y,s({ref:t},c))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,s=new Array(r);s[0]=u;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:a,s[1]=o;for(var p=2;p<r;p++)s[p]=n[p];return i.createElement.apply(null,s)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},1796:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var i=n(7462),a=(n(7294),n(3905));const r={id:"typescript-integration",title:"TypeScript"},s=void 0,o={unversionedId:"getting-started/typescript-integration",id:"getting-started/typescript-integration",title:"TypeScript",description:"Whenever a TypeScript file imports a Stylable stylesheet, you must provide a type for it. This is because TypeScript has no way of knowing what's inside Stylable *.st.css files.",source:"@site/docs/getting-started/typescript-integration.md",sourceDirName:"getting-started",slug:"/getting-started/typescript-integration",permalink:"/docs/getting-started/typescript-integration",draft:!1,editUrl:"https://github.com/wixplosives/stylable.io/edit/master/docs/getting-started/typescript-integration.md",tags:[],version:"current",frontMatter:{id:"typescript-integration",title:"TypeScript"},sidebar:"Discover",previous:{title:"Storybook",permalink:"/docs/getting-started/storybook-integration"},next:{title:"Webpack",permalink:"/docs/getting-started/webpack-integration"}},l={},p=[{value:"Generating types per stylesheet",id:"generating-types-per-stylesheet",level:2},{value:"Generated files",id:"generated-files",level:3},{value:"Using the CLI",id:"using-the-cli",level:3},{value:"Using a bundler",id:"using-a-bundler",level:3},{value:"Global definition",id:"global-definition",level:2},{value:"Typing 3rd-party stylesheets",id:"typing-3rd-party-stylesheets",level:3},{value:"Publishing",id:"publishing",level:2}],c={toc:p};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Whenever a TypeScript file imports a Stylable stylesheet, you must provide a type for it. This is because TypeScript has no way of knowing what's inside Stylable ",(0,a.kt)("inlineCode",{parentName:"p"},"*.st.css")," files."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Import example"',title:'"Import','example"':!0},"import { classes } from './button.st.css'; // requires typings\n")),(0,a.kt)("h2",{id:"generating-types-per-stylesheet"},"Generating types per stylesheet"),(0,a.kt)("p",null,"Stylable can generate a declaration file for each stylesheet. This approach has the advantage of providing exact typing information for each individual ",(0,a.kt)("a",{parentName:"p",href:"/docs/references/runtime"},"stylesheet runtime API"),"."),(0,a.kt)("h3",{id:"generated-files"},"Generated files"),(0,a.kt)("p",null,"Stylable generates two kinds of type-related files:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"*.d.ts")," provides typing for the stylesheet runtime API."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"*.d.ts.map")," provides mapping from the generated ",(0,a.kt)("inlineCode",{parentName:"li"},".d.ts")," file to the original ",(0,a.kt)("inlineCode",{parentName:"li"},".st.css")," stylesheet. This allows jumping to definitions in the original source straight from the TypeScript file.")),(0,a.kt)("p",null,"Type definitions that are generated adjacent to the stylesheet are automatically detected and used by TypeScript. This can cause bloat in the project source files, however. To prevent clutter in your project, we recommend that you generate all stylesheet typings to a single directory."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"/* type files grouped in st-types folder */\n \u251c\u2500\u2500 src\n |  \u251c\u2500\u2500 button.st.css           - source stylesheet\n |  \u2514\u2500\u2500 button.tsx              - component file\n |\n \u2514\u2500\u2500 st-types\n    \u251c\u2500\u2500 button.st.css.d.ts      - type definition\n    \u2514\u2500\u2500 button.st.css.d.ts.map  - type definition source-map\n")),(0,a.kt)("p",null,"You'll then need to configure TypeScript to use that directory. To do this, modify your ",(0,a.kt)("inlineCode",{parentName:"p"},"tsconfig.json")," to specify two ",(0,a.kt)("inlineCode",{parentName:"p"},"rootDirs")," - your source files, and the generated typings (learn more about this by reading the ",(0,a.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/tsconfig#rootDirs"},(0,a.kt)("inlineCode",{parentName:"a"},"tsconfig.json")," documentation"),") like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsonc",metastring:'title="tsconfig.json"',title:'"tsconfig.json"'},'{\n  "compilerOptions": {\n    "rootDirs": ["./src", "./st-types"]\n  }\n}\n')),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"We recommend adding the generated ",(0,a.kt)("inlineCode",{parentName:"p"},"*.st.css.d.ts")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"*.st.css.d.ts.map")," files to your ",(0,a.kt)("inlineCode",{parentName:"p"},".gitignore")," file, and to only include them in your published packages.")),(0,a.kt)("h3",{id:"using-the-cli"},"Using the CLI"),(0,a.kt)("p",null,"To generate type definition files to the ",(0,a.kt)("inlineCode",{parentName:"p"},"st-types")," directory using the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/wix/stylable/tree/master/packages/cli#cli-arguments"},(0,a.kt)("inlineCode",{parentName:"a"},"stc")," CLI"),", provide it with the ",(0,a.kt)("inlineCode",{parentName:"p"},"--srcDir"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"--outDir")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"--dts")," flags:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},'stc --srcDir="src" --outDir="st-types" --dts\n')),(0,a.kt)("p",null,"Source maps are generated by default when generating ",(0,a.kt)("inlineCode",{parentName:"p"},".d.ts")," files. If these are not wanted, the ",(0,a.kt)("inlineCode",{parentName:"p"},"--dtsSourceMap")," flag should be set to ",(0,a.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"Use ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/wix/stylable/tree/master/packages/cli#configuration-file"},(0,a.kt)("inlineCode",{parentName:"a"},"stylable.config.js"))," as a central location to share common Stylable configurations across tools and integrations.")),(0,a.kt)("h3",{id:"using-a-bundler"},"Using a bundler"),(0,a.kt)("p",null,"For projects that are already using one of our bundler integrations (",(0,a.kt)("a",{parentName:"p",href:"./webpack-integration"},"webpack")," or ",(0,a.kt)("a",{parentName:"p",href:"./rollup-integration"},"rollup"),"), you can configure the Stylable plugin to auto-generate types per stylesheet. This means that as you are working in your normal development flows, types will be updated in the background, and be available in your IDE."),(0,a.kt)("p",null,"This functionality is dependant on a ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/wix/stylable/tree/master/packages/cli#configuration-file"},(0,a.kt)("inlineCode",{parentName:"a"},"stylable.config.js"))," file that includes configuration for generating ",(0,a.kt)("inlineCode",{parentName:"p"},".d.ts")," files."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="stylable.config.js"',title:'"stylable.config.js"'},"//@ts-check\nconst { typedConfiguration } = require('@stylable/cli');\n\nexports.stcConfig = typedConfiguration({\n  options: {\n    srcDir: './src',\n    outDir: './st-types',\n    dts: true,\n  },\n});\n")),(0,a.kt)("p",null,"To activate this functionality in the bundler, configure the Stylable plugin with ",(0,a.kt)("inlineCode",{parentName:"p"},"{ stcConfig: true }"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"// create a webpack plugin instance\nnew StylableWebpackPlugin({ stcConfig: true });\n\n// create a rollup plugin instance\nstylableRollupPlugin({ stcConfig: true });\n")),(0,a.kt)("h2",{id:"global-definition"},"Global definition"),(0,a.kt)("p",null,"If you choose not to generate ",(0,a.kt)("inlineCode",{parentName:"p"},".d.ts")," typings for each stylesheet, you'll have to include in your project a general purpose ",(0,a.kt)("inlineCode",{parentName:"p"},"*.st.css")," global declaration. This provides a broad signature of a Stylable stylesheet."),(0,a.kt)("p",null,"To do this, create a ",(0,a.kt)("inlineCode",{parentName:"p"},"globals.d.ts")," file in your ",(0,a.kt)("inlineCode",{parentName:"p"},"./src")," directory and add the following declaration:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="globals.d.ts"',title:'"globals.d.ts"'},"declare module '*.st.css' {\n  export * from '@stylable/runtime/stylesheet';\n\n  const defaultExport: unknown;\n  export default defaultExport;\n}\n")),(0,a.kt)("h3",{id:"typing-3rd-party-stylesheets"},"Typing 3rd-party stylesheets"),(0,a.kt)("p",null,"If your project generates ",(0,a.kt)("inlineCode",{parentName:"p"},".d.ts")," typings for each stylesheet but you're consuming a package that published ",(0,a.kt)("inlineCode",{parentName:"p"},".st.css")," files without typings, you will have to declare global typings for that specific package."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="globals.d.ts"',title:'"globals.d.ts"'},"declare module 'third-party-package/*.st.css' {\n  export * from '@stylable/runtime/stylesheet';\n\n  const defaultExport: unknown;\n  export default defaultExport;\n}\n")),(0,a.kt)("h2",{id:"publishing"},"Publishing"),(0,a.kt)("p",null,"If you publish any ",(0,a.kt)("inlineCode",{parentName:"p"},"*.st.css")," files in your package, you should also publish the ",(0,a.kt)("inlineCode",{parentName:"p"},".d.ts")," and ",(0,a.kt)("inlineCode",{parentName:"p"},".d.ts.map")," files adjacent to them. This practice leads to a better experience for users consuming your project."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},'stc --srcDir="src" --outDir="dist" --stcss --dts\n')))}d.isMDXComponent=!0}}]);