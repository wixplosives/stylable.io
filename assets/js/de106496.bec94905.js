"use strict";(self.webpackChunkstylable_io=self.webpackChunkstylable_io||[]).push([[614],{6756:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>i,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"references/st-scope","title":"Scope","description":"Stylable scope enables you to wrap several style-rules using a single directive.","source":"@site/docs/references/st-scope.md","sourceDirName":"references","slug":"/references/st-scope","permalink":"/docs/references/st-scope","draft":false,"unlisted":false,"editUrl":"https://github.com/wixplosives/stylable.io/edit/master/docs/references/st-scope.md","tags":[],"version":"current","frontMatter":{"id":"st-scope","title":"Scope"},"sidebar":"Specification Reference","previous":{"title":"Root","permalink":"/docs/references/root"},"next":{"title":"Formatters","permalink":"/docs/references/formatters"}}');var s=t(4848),o=t(8453);const i={id:"st-scope",title:"Scope"},a=void 0,l={},c=[{value:"Syntax",id:"syntax",level:3},{value:"Theming with scope",id:"theming-with-scope",level:3},{value:"Creating a theme",id:"creating-a-theme",level:4},{value:"Extending a theme",id:"extending-a-theme",level:4},{value:"Theming with mixins",id:"theming-with-mixins",level:4}];function d(e){const n={code:"code",h3:"h3",h4:"h4",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Stylable"})," scope enables you to wrap several style-rules using a single directive.\nThe scoping directive receives any valid Stylable selector to use for its scoping."]}),"\n",(0,s.jsx)(n.p,{children:"Stylable scoping directive is similar in its behavior to CSS nesting, but can only be applied to a single level."}),"\n",(0,s.jsx)(n.h3,{id:"syntax",children:"Syntax"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",children:"/* entry.st.css */\n@st-scope .root {\n  input {\n    color: purple;\n  }\n}\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",children:"/* output */\n.entry__root input {\n  color: purple;\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"theming-with-scope",children:"Theming with scope"}),"\n",(0,s.jsx)(n.p,{children:"There are many possible patterns that can be used to theme a site or application in CSS. Stylable scoping capability serves as syntax sugar to allow an easier theme implementation."}),"\n",(0,s.jsx)(n.p,{children:"Below are several examples for how theming can be done."}),"\n",(0,s.jsx)(n.h4,{id:"creating-a-theme",children:"Creating a theme"}),"\n",(0,s.jsx)(n.p,{children:"In this example, we're representing a dark theme as a stylesheet. Creating your overriding rules under that Stylesheet's symbol and apply it to the relevant part of your DOM."}),"\n",(0,s.jsx)(n.p,{children:"In this theme implementation we are targeting three components and overriding their default look."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",children:'/* dark-theme.st.css */\n@st-import App, [Button, DropDown] from "./index.st.css";\n\n@st-scope .root {\n  App {\n    border-color: darkgrey;\n  }\n  Button {\n    background: darkgreen;\n  }\n  DropDown {\n    background: darkgrey;\n    color: beige;\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"extending-a-theme",children:"Extending a theme"}),"\n",(0,s.jsx)(n.p,{children:"In this example, we are extending our previously created dark theme, with a specific override for the Gallery component."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",children:'@st-import Gallery from "./gallery.st.css";\n@st-import DarkTheme from "./dark.st.css";\n\n@st-scope DarkTheme {\n  DropDown {\n    color: yellow; /* overriding DarkTheme color, perserving background */\n  }\n  Gallery {\n    background: darkgrey;\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"theming-with-mixins",children:"Theming with mixins"}),"\n",(0,s.jsx)(n.p,{children:"In this file, we are creating pre-designed flavors that uses Stylable variables to determine their styling."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",children:'/* flavors.st.css */\n@st-import [Button, UserForm] from "./index.st.css";\n\n:vars {\n  background: white;\n  text: black;\n  bordercolor: green;\n}\n\n.button-flavor {\n  -st-extends: Button;\n  background: value(background);\n  color: value(text);\n}\n\n.userForm-flavor {\n  -st-extends: UserForm;\n  background: value(background);\n  color: value(text);\n  border: 1px solid value(borderColor);\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"In this example, we use our existing flavors from above to customize our components look under the dark theme."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",children:'@st-import [UserForm, Button] from "./index.st.css";\n@st-import [button-flavor, userForm-flavor] from "./flavors.st.css";\n\n@st-scope .root {\n  Button {\n    -st-mixin: button-flavor(background black, text white);\n  }\n\n  UserForm {\n    -st-mixin: userForm-flavor(\n      background black,\n      text white,\n      borderColor #f4f4f4\n    );\n  }\n}\n'})})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>a});var r=t(6540);const s={},o=r.createContext(s);function i(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);