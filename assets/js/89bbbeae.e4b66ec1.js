"use strict";(self.webpackChunkstylable_io=self.webpackChunkstylable_io||[]).push([[3914],{4732:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>t,contentTitle:()=>l,default:()=>x,frontMatter:()=>a,metadata:()=>o,toc:()=>c});var s=i(5893),r=i(1151);const a={id:"mixins",title:"Mixins"},l=void 0,o={id:"references/mixins",title:"Mixins",description:"Stylable mixins enable you to reuse complex styles and CSS behaviors, defined in CSS or Javascript, and apply them to any style-rule during build time.",source:"@site/docs/references/mixins.md",sourceDirName:"references",slug:"/references/mixins",permalink:"/docs/references/mixins",draft:!1,unlisted:!1,editUrl:"https://github.com/wixplosives/stylable.io/edit/master/docs/references/mixins.md",tags:[],version:"current",frontMatter:{id:"mixins",title:"Mixins"},sidebar:"Specification Reference",previous:{title:"Formatters",permalink:"/docs/references/formatters"},next:{title:"Variables",permalink:"/docs/references/st-variables"}},t={},c=[{value:"CSS mixins",id:"css-mixins",level:2},{value:"Variable overrides",id:"variable-overrides",level:3},{value:"Partial CSS mixins",id:"partial-css-mixins",level:2},{value:"Example",id:"example",level:4},{value:"Example",id:"example-1",level:4},{value:"JavaScript mixins",id:"javascript-mixins",level:2},{value:"Create multiple style-rules",id:"create-multiple-style-rules",level:3},{value:"How mixins are applied",id:"how-mixins-are-applied",level:2},{value:"Considerations when using mixins",id:"considerations-when-using-mixins",level:2},{value:"Escape special characters",id:"escape-special-characters",level:3},{value:"Circular references",id:"circular-references",level:3}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Stylable"})," mixins enable you to reuse complex styles and CSS behaviors, defined in CSS or Javascript, and apply them to any style-rule during build time."]}),"\n",(0,s.jsx)(n.p,{children:"Here are some examples of when you can use mixins:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Presets/Variants - create reusable pieces of styling CSS"}),"\n",(0,s.jsx)(n.li,{children:"Layouts - easily describe complex layouts"}),"\n",(0,s.jsx)(n.li,{children:"Effects - easily describe complex effects"}),"\n",(0,s.jsx)(n.li,{children:"Macros - use code to define the CSS macros you need"}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:["If you need to return only a single declaration value using code, we recommend instead using ",(0,s.jsx)(n.a,{href:"/docs/references/formatters",children:"formatters"}),"."]})}),"\n",(0,s.jsx)(n.h2,{id:"css-mixins",children:"CSS mixins"}),"\n",(0,s.jsxs)(n.p,{children:["Any CSS stylesheet, class or element that is defined in a ",(0,s.jsx)(n.strong,{children:"Stylable"})," CSS file can be used as a mixin source. You can use either a local class or element, or import the mixin from a different stylesheet."]}),"\n",(0,s.jsx)(n.p,{children:"In the following example, a locally defined class is used as a mixin in the same stylesheet."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",children:".style-mixin {\n  color: green;\n  background: yellow;\n}\n.someClass {\n  -st-mixin: style-mixin;\n}\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",children:"/* CSS output */\n.someClass {\n  color: green; /* from local mixin */\n  background: yellow; /* from local mixin */\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Here is an example of a ",(0,s.jsx)(n.strong,{children:"Stylable"})," CSS file that is imported and mixed into the classes of a different stylesheet. The ",(0,s.jsx)(n.code,{children:".rootMixedIn"})," class as a stylesheet and ",(0,s.jsx)(n.code,{children:"classMixedIn"})," as a class."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",children:"/* mixins.st.css */\n.root {\n  color: purple;\n}\n\n.someClass {\n  color: green;\n}\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",children:'/* example.st.css - imports the above mixin */\n@st-import MixRoot, [someClass] from "./mixins.st.css";\n\n.rootMixedIn {\n  -st-mixin: MixRoot; /* stylesheet mixin */\n}\n\n.classMixedIn {\n  -st-mixin: someClass; /* class mixin */\n}\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",children:"/* CSS output */\n.rootMixedIn {\n  color: purple; /* from stylesheet mixin */\n}\n\n.rootMixedIn .someClass {\n  /* ruleset added as a result of the stylesheet mixin */\n  color: green;\n}\n\n.classMixedIn {\n  color: green; /* from class mixin */\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"variable-overrides",children:"Variable overrides"}),"\n",(0,s.jsx)(n.p,{children:"CSS mixins can accept named parameters in the following format:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",children:"mixin(variableName valueOverride, variableName2 valueOverride2)\n"})}),"\n",(0,s.jsx)(n.p,{children:"Multiple variables can be comma separated or written on multiple lines:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",children:"mixin (\n    variableName valueOverride,\n    variableName2 valueOverride2\n)\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Using parameters in a mixin enables you to override specific ",(0,s.jsx)(n.a,{href:"/docs/references/st-variables",children:"variables"})," inside of a mixin before they are applied."]}),"\n",(0,s.jsx)(n.p,{children:"Here is an example of using a variable in a CSS mixin and how it can be overridden by the mixin's parameter value."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",children:":vars {\n  color1: green;\n}\n\n.classToMixin {\n  background: value(color1);\n}\n\n.targetClass {\n  -st-mixin: classToMixin(color1 orange);\n}\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",children:"/* CSS output */\n.classToMixin {\n  background: green; /* from local class */\n}\n\n.targetClass {\n  background: orange; /* from mixin with override */\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"partial-css-mixins",children:"Partial CSS mixins"}),"\n",(0,s.jsxs)(n.p,{children:["Partial CSS Mixins (",(0,s.jsx)(n.code,{children:"-st-partial-mixin"}),") is a continuation of the idea of mixins with parameter overrides. (as described above)"]}),"\n",(0,s.jsxs)(n.p,{children:["Where a regular ",(0,s.jsx)(n.code,{children:"-st-mixin"})," includes all declarations inside the targeted mixed-in class, partial mixins enable you to pass through overriding variable values and mix in only declarations that would be affected by such an override."]}),"\n",(0,s.jsx)(n.p,{children:"For a partial mixin to work, at least one overriding variable must be provided, additional ones being optional."}),"\n",(0,s.jsx)(n.h4,{id:"example",children:"Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",children:":vars {\n  color1: red;\n  color2: green;\n}\n\n.my-mixin {\n  background: value(color1);\n  color: value(color2);\n}\n\n.container {\n  -st-partial-mixin: my-mixin(color1 gold);\n}\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",children:"/* output */\n.container {\n  background: gold;\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"A partial mixin will include any declaration in the mixed-in class (or rules containing the mixed-in class) that contains a variable usage that will be overridden. Any other variables not overridden inside the mixed in declaration will retain their original values."}),"\n",(0,s.jsx)(n.h4,{id:"example-1",children:"Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",children:":vars {\n  color1: red;\n  color2: green;\n  size1: 2px;\n}\n\n.my-mixin {\n  background: value(color1);\n  color: value(color2);\n}\n\n.my-mixin .part {\n  border: value(size1) solid value(color2);\n}\n\n.container {\n  -st-partial-mixin: my-mixin(color1 gold, size1 5px);\n}\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",children:"/* output */\n.container {\n  background: gold;\n}\n\n.container .part {\n  border: 5px solid green;\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"javascript-mixins",children:"JavaScript mixins"}),"\n",(0,s.jsx)(n.p,{children:"JavaScript mixins allow you to create complex structures in CSS based on the arguments passed to the mixin."}),"\n",(0,s.jsx)(n.p,{children:"A JavaScript mixin returns a CSS fragment which can contain multiple declarations with optional sub style-rules."}),"\n",(0,s.jsx)(n.p,{children:"Arguments are passed to the mixin as a string argument and it's the mixin's responsibility to parse them."}),"\n",(0,s.jsx)(n.p,{children:"Here is an example of a mixin receiving multiple arguments and returning multiple declarations into the target ruleset."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"/* file my-mixin.js */\nmodule.exports = function colorAndBg([color, bgColor]) {\n  /* arguments: array of string types */\n\n  return {\n    color: color,\n    background: bgColor,\n  };\n};\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",children:'/* file example.st.css */\n@st-import colorAndBg from "./my-mixin";\n\n.codeMixedIn {\n  -st-mixin: colorAndBg(green, orange);\n  font-family: monospace;\n}\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",children:"/* CSS output */\n.codeMixedIn {\n  color: green; /* from JS mixin */\n  background: orange; /* from JS mixin */\n  font-family: monospace; /* from local class */\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"create-multiple-style-rules",children:"Create multiple style-rules"}),"\n",(0,s.jsx)(n.p,{children:"Mixins can return multiple style-rules that are mixed into the target stylesheet. These style-rules can be written with the following syntax options:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"selector"})," - resulting ruleset is appended as a descendent selector to its mixed in target (in below example ",(0,s.jsx)(n.code,{children:".otherClass"}),")"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"&selector"})," - resulting ruleset references the parent selector into which it was mixed in (in below example ",(0,s.jsx)(n.code,{children:"&:hover"}),", the parent selector is ",(0,s.jsx)(n.code,{children:".codeMixedIn"}),")"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'/* file my-mixin.js */\nmodule.exports = function complexMixin([color, bgColor]) {\n  /* arguments: array of string types */\n\n  return {\n    color: color,\n    background: bgColor,\n    "&:hover": {\n      color: "gold",\n    },\n    ".otherClass": {\n      color: "purple",\n    },\n  };\n};\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",children:'/* file example.st.css */\n@st-import complexMixin from "./my-mixin";\n\n.codeMixedIn {\n  -st-mixin: complexMixin(green, orange);\n  font-family: monospace;\n}\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",children:"/* CSS output */\n.codeMixedIn {\n  color: green; /* from JS mixin */\n  background: orange; /* from JS mixin */\n  font-family: monospace; /* from local class */\n}\n\n.codeMixedIn:hover {\n  /* from JS mixin with & */\n  color: gold;\n}\n\n.codeMixedIn .otherClass {\n  /* from JS mixin with appended selector */\n  color: purple;\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"how-mixins-are-applied",children:"How mixins are applied"}),"\n",(0,s.jsx)(n.p,{children:"Mixins can add CSS declarations to the CSS ruleset to which they are applied."}),"\n",(0,s.jsxs)(n.p,{children:["Rules are added at the position in the CSS where the ",(0,s.jsx)(n.code,{children:"-st-mixin"})," is declared.\nAny selectors that are appended as a result of the mixin are added directly after the ruleset that the mixin was applied to."]}),"\n",(0,s.jsxs)(n.p,{children:["You can apply multiple mixins from either CSS or JavaScript, or both separated by comma ",(0,s.jsx)(n.code,{children:"-st-mixin: mixinA, mixinB"}),".\nMultiple mixins are applied according to the order that they are declared left to right."]}),"\n",(0,s.jsx)(n.h2,{id:"considerations-when-using-mixins",children:"Considerations when using mixins"}),"\n",(0,s.jsxs)(n.p,{children:["Take a look at these considerations before working with ",(0,s.jsx)(n.strong,{children:"Stylable"})," mixins."]}),"\n",(0,s.jsx)(n.h3,{id:"escape-special-characters",children:"Escape special characters"}),"\n",(0,s.jsxs)(n.p,{children:["You can escape special characters by wrapping them with quotes or using a backslash (",(0,s.jsx)(n.code,{children:"\\"}),")."]}),"\n",(0,s.jsx)(n.p,{children:"Example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",children:'.x {\n  /* use quotations to include comma */\n  -st-mixin: mix(300, "xx,x"); /* ["300", "xx,x"] */\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"They can also be used to include quotes or backslashes as part of the parameter."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",children:'.y {\n  /* escape slashes */\n  -st-mixin: mix(300, \'"xxx"\'); /* ["300", "\\"xxx\\""] */\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"circular-references",children:"Circular references"}),"\n",(0,s.jsxs)(n.p,{children:["It is possible to reach a state where you have circular references between mixins. These cannot be resolved, and a diagnostics warning is issued in your ",(0,s.jsx)(n.strong,{children:"Stylable"})," code intelligence and build process."]})]})}function x(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},1151:(e,n,i)=>{i.d(n,{Z:()=>o,a:()=>l});var s=i(7294);const r={},a=s.createContext(r);function l(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);