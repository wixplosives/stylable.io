"use strict";(self.webpackChunkstylable_io=self.webpackChunkstylable_io||[]).push([[6085],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>c});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},s=Object.keys(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=n.createContext({}),p=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},m=function(e){var t=p(e.components);return n.createElement(o.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,s=e.originalType,o=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),u=p(a),c=r,y=u["".concat(o,".").concat(c)]||u[c]||d[c]||s;return a?n.createElement(y,l(l({ref:t},m),{},{components:a})):n.createElement(y,l({ref:t},m))}));function c(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=a.length,l=new Array(s);l[0]=u;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var p=2;p<s;p++)l[p]=a[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},2399:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>p});var n=a(7462),r=(a(7294),a(3905));const s={id:"imports",title:"Import"},l=void 0,i={unversionedId:"references/imports",id:"references/imports",title:"Import",description:"Stylable enables you to import other stylesheets and modules in a way that is similar to JS Imports. You can then use the stylesheet or module as it's been defined, or just one or more of its named values, in your own Stylable stylesheet.",source:"@site/docs/references/imports.md",sourceDirName:"references",slug:"/references/imports",permalink:"/docs/references/imports",draft:!1,editUrl:"https://github.com/wixplosives/stylable.io/edit/master/docs/references/imports.md",tags:[],version:"current",frontMatter:{id:"imports",title:"Import"},sidebar:"Specification Reference",previous:{title:"url()",permalink:"/docs/references/using-external-assets"},next:{title:"Root",permalink:"/docs/references/root"}},o={},p=[{value:"Import syntax",id:"import-syntax",level:2},{value:"Basic usage",id:"basic-usage",level:2},{value:"Stylesheet default export",id:"stylesheet-default-export",level:3},{value:"Stylesheet named exports",id:"stylesheet-named-exports",level:3},{value:"JS named exports",id:"js-named-exports",level:3},{value:"Alias JS named exports",id:"alias-js-named-exports",level:3},{value:"Keyframes and Layers",id:"keyframes-and-layers",level:2}],m={toc:p};function d(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Stylable")," enables you to import other stylesheets and modules in a way that is similar to ",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import"},"JS Imports"),". You can then use the stylesheet or module as it's been defined, or just one or more of its named values, in your own ",(0,r.kt)("strong",{parentName:"p"},"Stylable")," stylesheet."),(0,r.kt)("h2",{id:"import-syntax"},"Import syntax"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Stylable")," supports two types of import syntax that can be used, the two are identical in their capabilities."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"@st-import")," at-rule directive - A newer more concise syntax, similar to ES imports:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"replace ",(0,r.kt)("inlineCode",{parentName:"li"},"<DEFAULT_NAME>")," with your desired local name to import an entire stylesheet, representing its root class"),(0,r.kt)("li",{parentName:"ul"},"Inside the square brackets, import any inner parts belonging to said stylesheet")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-css"},"@st-import DefaultComp, [somePart, someVar] from './stylesheet.st.css';\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},":import")," ruleset directive - The legacy more verbose way of importing symbols, uses the ",(0,r.kt)("strong",{parentName:"li"},"Stylable")," syntax beginning with ",(0,r.kt)("inlineCode",{parentName:"li"},"-st-")," inside the ",(0,r.kt)("inlineCode",{parentName:"li"},":import")," ruleset:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"-st-from:")," Identifies the path to the stylesheet or JavaScript module. Can be a relative path or a 3rd party path."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"-st-default:")," Imports the default export of the module named in ",(0,r.kt)("inlineCode",{parentName:"li"},"-st-from:"),". Use with the name by which to identify the imported value in the scoped stylesheet."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"-st-named:")," List of the named exports to import into the local scoped stylesheet from the file named in ",(0,r.kt)("inlineCode",{parentName:"li"},"-st-from:"),".")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-css"},':import {\n  -st-from: "./stylesheet.st.css";\n  -st-default: <DEFAULT_NAME>;\n  -st-named: <NAMED_PART1, NAMED_PART2, ...>;\n}\n')),(0,r.kt)("p",null,"Every example below will feature both types of import syntaxes, their end result is identical."),(0,r.kt)("admonition",{type:"important"},(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},":import")," is a Stylable directive and not a selector."),(0,r.kt)("li",{parentName:"ul"},"likewise, ",(0,r.kt)("inlineCode",{parentName:"li"},"@st-import")," is a Stylable directive and not an actual at-rule."),(0,r.kt)("li",{parentName:"ul"},"Import statements cannot be nested or be part of a complex selector."),(0,r.kt)("li",{parentName:"ul"},"Multiple imports may conflict in their used symbol names; the last one in the file wins."),(0,r.kt)("li",{parentName:"ul"},"When an imported symbol conflicts with a local symbol the local will be used."))),(0,r.kt)("h2",{id:"basic-usage"},"Basic usage"),(0,r.kt)("p",null,"Here are some examples of how you can use imports in your ",(0,r.kt)("strong",{parentName:"p"},"Stylable")," stylesheet."),(0,r.kt)("h3",{id:"stylesheet-default-export"},"Stylesheet default export"),(0,r.kt)("p",null,"Import the ",(0,r.kt)("inlineCode",{parentName:"p"},"button.st.css")," stylesheet from a local location. Assign the name ",(0,r.kt)("inlineCode",{parentName:"p"},"Button")," to the default export of that stylesheet for use in this scoped stylesheet."),(0,r.kt)("p",null,"When importing another stylesheet, the default import represents the root of the stylesheet and is generally treated as a component, and named imports represent other internal stylesheet parts."),(0,r.kt)("admonition",{type:"important"},(0,r.kt)("p",{parentName:"admonition"},"Generally when importing a ",(0,r.kt)("strong",{parentName:"p"},"default")," value from a stylable file, you should use a capital letter to signify that the value represents a component root node in this stylesheet.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-css"},"/* comp.st.css - atRule syntax */\n@st-import ToggleButton from './button.st.css';\n")),(0,r.kt)("h3",{id:"stylesheet-named-exports"},"Stylesheet named exports"),(0,r.kt)("p",null,"Named imports from a stylesheet can be used to bring symbols of different types, which you can then use inside your stylesheet."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Elements"),(0,r.kt)("li",{parentName:"ul"},"Classes"),(0,r.kt)("li",{parentName:"ul"},"Stylable Variables"),(0,r.kt)("li",{parentName:"ul"},"CSS Variables"),(0,r.kt)("li",{parentName:"ul"},"Keyframes - see ",(0,r.kt)("a",{parentName:"li",href:"#importing_keyframes"},"importing keyframes")),(0,r.kt)("li",{parentName:"ul"},"Layers - see ",(0,r.kt)("a",{parentName:"li",href:"./layer#Import_and_Export"},"importing layers"))),(0,r.kt)("p",null,"In this"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-css"},"/* comp.st.css - atRule syntax */\n@st-import [label, icon, --bgColor] from './button.st.css';\n")),(0,r.kt)("h3",{id:"js-named-exports"},"JS named exports"),(0,r.kt)("p",null,"The values ",(0,r.kt)("inlineCode",{parentName:"p"},"gridMixin")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"tooltipMixin")," are imported from the local JavaScript module ",(0,r.kt)("inlineCode",{parentName:"p"},"my-mixins.js"),". These named exports are now imported into this scoped stylesheet."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"When importing named values, they are generally used as class or element type selectors and, therefore, you should camelCase to name them.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-css"},"/* comp.st.css - atRule syntax */\n@st-import [gridMixin, tooltipMixin] from './my-mixins';\n")),(0,r.kt)("h3",{id:"alias-js-named-exports"},"Alias JS named exports"),(0,r.kt)("p",null,"The values ",(0,r.kt)("inlineCode",{parentName:"p"},"gridMixin")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"tooltipMixin")," are imported from the local JavaScript module ",(0,r.kt)("inlineCode",{parentName:"p"},"my-mixins.js"),". The value ",(0,r.kt)("inlineCode",{parentName:"p"},"gridMixin")," is used as is and ",(0,r.kt)("inlineCode",{parentName:"p"},"tooltipMixin")," has been renamed for use in this scoped stylesheet as ",(0,r.kt)("inlineCode",{parentName:"p"},"tooltip"),". These mixins are referred to as ",(0,r.kt)("inlineCode",{parentName:"p"},"gridMixin")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"tooltip")," in this stylesheet."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-css"},"/* comp.st.css - atRule syntax */\n@st-import [gridMixin, tooltipMixin as tooltip] from './my-mixins';\n")),(0,r.kt)("h2",{id:"keyframes-and-layers"},"Keyframes and Layers"),(0,r.kt)("p",null,"In Stylable, both class names, keyframes, and layers undergo namespacing to avoid collision. However, despite the three being global, they do not share a namespace in CSS - this means that you can have both a class name, a keyframe and a layer all with the same name."),(0,r.kt)("p",null,"Due to this, when importing keyframes or layers from another stylesheet, a special ",(0,r.kt)("inlineCode",{parentName:"p"},"keyframes()")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"layer()")," directive is required."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-css"},"/* comp.st.css - atRule syntax */\n@st-import [keyframes(slideX, slideY)] from './keyframes.st.css';\n@st-import [layer(theme)] from './layer.st.css';\n")),(0,r.kt)("p",null,"You can read more about keyframes behavior ",(0,r.kt)("a",{parentName:"p",href:"/docs/references/keyframes"},"here"),", or about layers ",(0,r.kt)("a",{parentName:"p",href:"/docs/references/layer"},"here"),"."))}d.isMDXComponent=!0}}]);