"use strict";(self.webpackChunkstylable_io=self.webpackChunkstylable_io||[]).push([[9629],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var a=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,s=function(e,t){if(null==e)return{};var n,a,s={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var i=a.createContext({}),u=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(i.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,s=e.mdxType,r=e.originalType,i=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),c=u(n),d=s,g=c["".concat(i,".").concat(d)]||c[d]||m[d]||r;return n?a.createElement(g,l(l({ref:t},p),{},{components:n})):a.createElement(g,l({ref:t},p))}));function d(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var r=n.length,l=new Array(r);l[0]=c;var o={};for(var i in t)hasOwnProperty.call(t,i)&&(o[i]=t[i]);o.originalType=e,o.mdxType="string"==typeof e?e:s,l[1]=o;for(var u=2;u<r;u++)l[u]=n[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},6269:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>m,frontMatter:()=>r,metadata:()=>o,toc:()=>u});var a=n(7462),s=(n(7294),n(3905));const r={id:"state-parameter-types",sidebar_label:"Pseudo-Classes Parameters",title:"Parameter Types to Use with Pseudo-Classes",layout:"docs"},l=void 0,o={unversionedId:"references/state-parameter-types",id:"references/state-parameter-types",title:"Parameter Types to Use with Pseudo-Classes",description:"Custom pseudo-classes can either be simple or accept parameters.",source:"@site/docs/references/state-parameter-types.md",sourceDirName:"references",slug:"/references/state-parameter-types",permalink:"/docs/references/state-parameter-types",draft:!1,editUrl:"https://github.com/wixplosives/stylable.io/edit/master/docs/references/state-parameter-types.md",tags:[],version:"current",frontMatter:{id:"state-parameter-types",sidebar_label:"Pseudo-Classes Parameters",title:"Parameter Types to Use with Pseudo-Classes",layout:"docs"},sidebar:"Specification Reference",previous:{title:"Pseudo-Classes",permalink:"/docs/references/pseudo-classes"},next:{title:"Pseudo-Elements",permalink:"/docs/references/pseudo-elements"}},i={},u=[{value:"Enum",id:"enum",level:2},{value:"String",id:"string",level:2},{value:"String validation optional",id:"string-validation-optional",level:3},{value:"Number",id:"number",level:2},{value:"Number validation optional",id:"number-validation-optional",level:3},{value:"Future intent",id:"future-intent",level:2}],p={toc:u};function m(e){let{components:t,...n}=e;return(0,s.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"Custom ",(0,s.kt)("a",{parentName:"p",href:"/docs/references/pseudo-classes"},"pseudo-classes")," can either be simple or accept parameters. "),(0,s.kt)("p",null,"A custom pseudo-class with no parameters is considered a ",(0,s.kt)("a",{parentName:"p",href:"/docs/references/pseudo-classes#simple-custom-states"},"simple custom state"),"."),(0,s.kt)("p",null,"When defining a custom pseudo-class with a parameter:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"You must provide a type definition."),(0,s.kt)("li",{parentName:"ul"},"Optionally you can provide validation arguments to the type defined"),(0,s.kt)("li",{parentName:"ul"},"Optionally you can provide each state definition with a ",(0,s.kt)("inlineCode",{parentName:"li"},"default value"),", enabling it to be used without providing a parameter argument.")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-css"},'.root {\n    -st-states: stateX([type]) [default Value?],\n                stateY([type]) [default Value?];\n}\n\n.root:stateX(arg) {}\n\n.root:stateX {\n    /* parameter resolves to "default Value", \n    if no default value was provided,\n    this will fail validation */\n}\n')),(0,s.kt)("admonition",{type:"tip"},(0,s.kt)("p",{parentName:"admonition"},"When defining a ",(0,s.kt)("inlineCode",{parentName:"p"},"default value"),", you can use ",(0,s.kt)("a",{parentName:"p",href:"/docs/references/st-variables"},"variables")," and ",(0,s.kt)("a",{parentName:"p",href:"/docs/references/formatters"},"formatters"),".")),(0,s.kt)("h2",{id:"enum"},"Enum"),(0,s.kt)("p",null,"You can define a custom state with possible ",(0,s.kt)("strong",{parentName:"p"},"enum value")," options, and then target one of the options using a pseudo-class selector with a matching ",(0,s.kt)("strong",{parentName:"p"},"string argument"),"."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-css"},'.root {\n    /* define the custom state "size" */\n    -st-states: size( enum(small, medium, large) )\n}\n\n.root:size(medium) {\n    /* target an element with a state value of "medium" */\n}\n\n.root:size(huge) {\n   /* invalid because "huge" is not a one of the possible \n   values defined for the state "size" */\n}\n')),(0,s.kt)("p",null,"Setting the state's ",(0,s.kt)("strong",{parentName:"p"},"enum value")," in the view ",(0,s.kt)("inlineCode",{parentName:"p"},'<span className={style(classes.root, {size: "medium"})}>')," resolves to ",(0,s.kt)("inlineCode",{parentName:"p"},'<span className="style--size-medium" />'),"."),(0,s.kt)("h2",{id:"string"},"String"),(0,s.kt)("p",null,"You can define a custom state with a ",(0,s.kt)("strong",{parentName:"p"},"string value"),", and then target it using a pseudo-class selector with a matching ",(0,s.kt)("strong",{parentName:"p"},"string argument"),"."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-css"},'.root {\n    /* define the "selected" custom state with a string parameter type */\n    -st-states: selected( string );\n}\n\n.root:selected(username) {\n    /* target an element with a state value that \n    is exactly the string argument "username" */\n}\n')),(0,s.kt)("p",null,"Setting the state ",(0,s.kt)("strong",{parentName:"p"},"string value")," in the view ",(0,s.kt)("inlineCode",{parentName:"p"},'<span className={style(classes.root, {selected: "username"})}>')," resolves to ",(0,s.kt)("inlineCode",{parentName:"p"},'<span className="style--selected-username" />'),"."),(0,s.kt)("h3",{id:"string-validation-optional"},"String validation ","[optional]"),(0,s.kt)("p",null,"You can optionally pass a regular expression string as an argument to add validation for the pseudo-class selector ",(0,s.kt)("strong",{parentName:"p"},"string argument"),". The regular expression must be within quotes."),(0,s.kt)("p",null,"You can optionally pass a regular expression function (",(0,s.kt)("inlineCode",{parentName:"p"},"regex()"),") to the string type to add regular expression validation for the pseudo-class selector.\nThis function accepts a single expression to be tested against the selector parameter. The expression must be within quotes."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-css"},'.root {\n    /* validates that the targeting string argument begins with "user" */\n    -st-states: selected( string(regex("^user")) );\n}\n\n/* a valid argument */\n.root:selected(username) {}\n\n/* invalid because it doesn\'t match the regular expression "^user" */\n.root:selected(index) {}\n')),(0,s.kt)("p",null,"String type can also accept several other validations, including ",(0,s.kt)("inlineCode",{parentName:"p"},"minLength(number)"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"maxLength(number)")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"contains(string)"),"."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-css"},".root {\n    /* validates the targeting string arguments with multiple validations */\n    -st-states: selected( \n                    string( \n                        minLength(2), \n                        maxLength(10), \n                        contains(user) \n                    ) \n                );\n}\n\n/* valid argument */\n.root:selected(username) {}\n\n/* invalid due to minLength(2) & contains(user) */\n.root:selected(x) {}\n")),(0,s.kt)("h2",{id:"number"},"Number"),(0,s.kt)("p",null,"You can define a custom state with a ",(0,s.kt)("strong",{parentName:"p"},"number value"),", and then target it using a pseudo-class selector with a matching ",(0,s.kt)("strong",{parentName:"p"},"number argument"),"."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-html"},'<span data-column="5" />\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-css"},'.root {\n    /* define the custom pseudo-class "column" */\n    -st-states: column( number )\n}\n\n.root:column(5) {\n    /* target an element with a state value that is exactly the number argument "5" */\n}\n')),(0,s.kt)("p",null,"Setting the state ",(0,s.kt)("strong",{parentName:"p"},"number value")," in the view ",(0,s.kt)("inlineCode",{parentName:"p"},"<span className={style(classes.root, {column: 5})}>")," resolves to ",(0,s.kt)("inlineCode",{parentName:"p"},'<span className="style---column-1-5" />'),"."),(0,s.kt)("h3",{id:"number-validation-optional"},"Number validation ","[optional]"),(0,s.kt)("p",null,"You can use several validators that the number type provides."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-css"},'.root {\n    /* validates the targeting number argument */\n    -st-states: column( number( min(2), max(6), multipleOf(2) ) )\n}\n\n/* valid arguments */\n.root:column(2),\n.root:column(4),\n.root:column(6) {}\n\n/* invalid because not a "multipleOf(2)" */\n.root:column(3),\n.root:column(5) {}\n\n/* invalid because of "min(2)" and "max(6)" validations */\n.root:column(1),\n.root:column(7) {}\n')),(0,s.kt)("h2",{id:"future-intent"},"Future intent"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://github.com/wix/stylable/issues/268"},"Custom user types and validations")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://github.com/wix/stylable/issues/270"},'Custom pseudo-class type "nth"')),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://github.com/wix/stylable/issues/269"},"Multiple named parameters")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://github.com/wix/stylable/issues/271"},"Custom pseudo-class string prefixes")),(0,s.kt)("li",{parentName:"ul"},"Lang type - use attribute selector ",(0,s.kt)("inlineCode",{parentName:"li"},'[state|="en"]')," to support language code")))}m.isMDXComponent=!0}}]);