"use strict";(self.webpackChunkstylable_io=self.webpackChunkstylable_io||[]).push([[2110],{598:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"references/type-selectors","title":"Type Selector","description":"A CSS type selector is used to target DOM elements according to their tag name.","source":"@site/docs/references/tag-selectors.md","sourceDirName":"references","slug":"/references/type-selectors","permalink":"/docs/references/type-selectors","draft":false,"unlisted":false,"editUrl":"https://github.com/wixplosives/stylable.io/edit/master/docs/references/tag-selectors.md","tags":[],"version":"current","frontMatter":{"id":"type-selectors","title":"Type Selector"},"sidebar":"Specification Reference","previous":{"title":"Pseudo-Element","permalink":"/docs/references/pseudo-elements"},"next":{"title":"url()","permalink":"/docs/references/using-external-assets"}}');var o=n(4848),r=n(8453);const i={id:"type-selectors",title:"Type Selector"},l=void 0,c={},a=[{value:"Syntax",id:"syntax",level:2},{value:"Native element",id:"native-element",level:3},{value:"Component element",id:"component-element",level:3},{value:"Scoping",id:"scoping",level:2},{value:"Import and Export",id:"import-and-export",level:2},{value:"Runtime",id:"runtime",level:2},{value:"Namespace",id:"namespace",level:2}];function d(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(t.p,{children:["A CSS ",(0,o.jsx)(t.code,{children:"type selector"})," is used to target DOM elements according to their tag name."]}),"\n",(0,o.jsxs)(t.p,{children:["This page goes over how Stylable handles ",(0,o.jsx)(t.code,{children:"type selector"}),", for more details about the language feature itself, checkout ",(0,o.jsx)(t.a,{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/Type_selectors",children:"MDN type selector"}),"."]}),"\n",(0,o.jsx)(t.h2,{id:"syntax",children:"Syntax"}),"\n",(0,o.jsx)(t.h3,{id:"native-element",children:"Native element"}),"\n",(0,o.jsx)(t.p,{children:"A native element behaves exactly as it does in CSS, and requires no special treatment in Stylable."}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-css",children:"/* scoped under local class */\n.root div {} \n\n/* scoped to local class */\ndiv.root  {} \n"})}),"\n",(0,o.jsx)(t.h3,{id:"component-element",children:"Component element"}),"\n",(0,o.jsxs)(t.p,{children:["Use a ",(0,o.jsx)(t.strong,{children:"capital first letter"})," to refer to a ",(0,o.jsx)(t.a,{href:"/docs/references/imports#default-import",children:"default import"})," of a stylesheet ",(0,o.jsx)(t.a,{href:"/docs/references/root",children:"root"}),"."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-css",children:"@st-import Comp from './comp.st.css';\n\n/* style all Comp nested under root */\n.root Comp {}\n"})}),"\n",(0,o.jsx)(t.h2,{id:"scoping",children:"Scoping"}),"\n",(0,o.jsx)(t.p,{children:"Stylable validates that a type selector is scoped to the stylesheet it is in. To target a type selector, compound it or scope it under a local class in order to avoid styling unrelated elements outside the scope of the stylesheet."}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-css",children:"/* error - unscoped selector */\ndiv {}\n\n/* valid */\n.root div {}\ndiv.root {}\n"})}),"\n",(0,o.jsxs)(t.admonition,{title:"reuse scope",type:"tip",children:[(0,o.jsxs)(t.p,{children:["Scope rules with the ",(0,o.jsx)(t.a,{href:"/docs/references/st-scope",children:(0,o.jsx)(t.code,{children:"@st-scope"})})," at-rule to minimize selector verbosity."]}),(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-css",children:"@st-scope .root {\n  div {}\n}\n"})})]}),"\n",(0,o.jsx)(t.h2,{id:"import-and-export",children:"Import and Export"}),"\n",(0,o.jsxs)(t.p,{children:["Component elements, with ",(0,o.jsx)(t.strong,{children:"capital first letter"}),", can be exported from a stylesheet ",(0,o.jsx)(t.strong,{children:"if used"})," in a selector. You can import them within the ",(0,o.jsx)(t.code,{children:"@st-import"})," ",(0,o.jsx)(t.a,{href:"/docs/references/imports#named-import",children:"named import"})," brackets."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-css",metastring:'title="index.st.css"',children:"@st-import Button from './button.st.css';\n@st-import Menu from './menu.st.css';\n\n.root Button {}\n.root Menu {}\n"})}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-css",metastring:'title="theme.st.css"',children:"@st-import [Button, Menu] from './index.st.css';\n\n@st-scope .root {\n  /* customize all buttons nested in theme root */\n  Button {}\n  /* customize all menus nested in theme root */\n  Menu {}\n}\n"})}),"\n",(0,o.jsx)(t.h2,{id:"runtime",children:"Runtime"}),"\n",(0,o.jsx)(t.p,{children:"Elements are not available on the Stylable stylesheet runtime."}),"\n",(0,o.jsx)(t.h2,{id:"namespace",children:"Namespace"}),"\n",(0,o.jsx)(t.p,{children:"Native elements are not namespaced. However, if an element originates from a class, like a component element default import, then it is transformed during build."}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-css",metastring:'title="entry.st.css"',children:"@st-import Button from './button.st.css';\n\n.root Button {}\n.root div {}\n\n/* OUTPUT */\n.entry__root .button__root {}\n.entry__root div {}\n"})})]})}function p(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>l});var s=n(6540);const o={},r=s.createContext(o);function i(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);