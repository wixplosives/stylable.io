"use strict";(self.webpackChunkstylable_io=self.webpackChunkstylable_io||[]).push([[339],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),i=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=i(e.components);return r.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=i(n),g=o,d=u["".concat(c,".").concat(g)]||u[g]||m[g]||a;return n?r.createElement(d,s(s({ref:t},p),{},{components:n})):r.createElement(d,s({ref:t},p))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=u;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,s[1]=l;for(var i=2;i<a;i++)s[i]=n[i];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4741:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>a,metadata:()=>l,toc:()=>i});var r=n(7462),o=(n(7294),n(3905));const a={id:"tag-selectors",title:"Type Selector"},s=void 0,l={unversionedId:"references/tag-selectors",id:"references/tag-selectors",title:"Type Selector",description:"Like CSS type selectors, Stylable element Type selectors can match the names of elements in the DOM.",source:"@site/docs/references/tag-selectors.md",sourceDirName:"references",slug:"/references/tag-selectors",permalink:"/docs/references/tag-selectors",draft:!1,editUrl:"https://github.com/wixplosives/stylable.io/edit/master/docs/references/tag-selectors.md",tags:[],version:"current",frontMatter:{id:"tag-selectors",title:"Type Selector"},sidebar:"Specification Reference",previous:{title:"Pseudo-Element",permalink:"/docs/references/pseudo-elements"},next:{title:"url()",permalink:"/docs/references/using-external-assets"}},c={},i=[{value:"Native element",id:"native-element",level:2},{value:"Component element",id:"component-element",level:2}],p={toc:i};function m(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Like CSS ",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/CSS/Type_selectors"},"type selectors"),", ",(0,o.kt)("strong",{parentName:"p"},"Stylable")," element ",(0,o.kt)("inlineCode",{parentName:"p"},"Type selectors")," can match the names of elements in the DOM."),(0,o.kt)("p",null,"Element type selectors are ",(0,o.kt)("strong",{parentName:"p"},"not")," scoped themselves. Other selectors used with an element selector can be scoped. For example if a ",(0,o.kt)("a",{parentName:"p",href:"/docs/references/class-selectors"},"class selector")," is used with a element selector, the class is scoped and the element selector is not. The matching qualified name of an element selector can therefore target any element in the subtree of the component."),(0,o.kt)("h2",{id:"native-element"},"Native element"),(0,o.kt)("p",null,"Targeting a native element matches any element with the same element name that is found in a prefix selector. The prefix selector could be a class selector or the root."),(0,o.kt)("p",null,"To target ",(0,o.kt)("strong",{parentName:"p"},"all")," elements of a certain type in your project, use a ",(0,o.kt)("a",{parentName:"p",href:"/docs/references/global-selectors"},(0,o.kt)("inlineCode",{parentName:"a"},"global selector")),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-css",metastring:'title="page.st.css"',title:'"page.st.css"'},".root form {\n  background: green;\n}\n.sideBar:hover form {\n  background: red;\n}\n:global(span) {\n  background: blue;\n}\n\n/* OUTPUT - form is scoped to the page - affects any nested instance */\n.page__root form {\n  background: green;\n}\n.page__sideBar:hover form {\n  background: red;\n}\nspan {\n  /* affects *ALL* spans in your application */\n  background: blue;\n}\n")),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"The value ",(0,o.kt)("inlineCode",{parentName:"p"},"form")," itself is not namespaced.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="comp.jsx"',title:'"comp.jsx"'},"import React from 'react';\nimport { style, classes } from './comp.st.css';\n\nclass Comp extends React.Component {\n  render() {\n    return (\n      <div className={style(classes.root, this.props.className)}>\n        <div className={classes.sideBar}>\n          <form /> /* green background and red while hovering parent */\n        </div>\n        <form /> /* green background */\n        <span /> /* blue background */\n      </div>\n    );\n  }\n}\n")),(0,o.kt)("h2",{id:"component-element"},"Component element"),(0,o.kt)("p",null,"When the value of a stylesheet is ",(0,o.kt)("a",{parentName:"p",href:"/docs/references/imports"},"imported")," with a ",(0,o.kt)("strong",{parentName:"p"},"capital first letter"),", it can be used as a component element selector."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-css",metastring:'title="page.st.css"',title:'"page.st.css"'},'@st-import ToggleButton from "./toggle-button.st.css";\n\n.root ToggleButton {\n  background: green;\n}\n.sideBar:hover ToggleButton {\n  background: red;\n}\n\n/* OUTPUT - ToggleButton is scoped to the page, affects any nested toggle button */\n.page__root .toggleButton__root {\n  background: green;\n}\n.page__sideBar:hover .toggleButton__root {\n  background: red;\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="comp.jsx"',title:'"comp.jsx"'},"import React from 'react';\nimport { style, classes } from './comp.st.css';\n\n/* React implementation - button component uses toggle-button.css */\nimport ToggleButton from './toggle-button';\n\nclass Comp extends React.Component {\n  render() {\n    return (\n      <div className={style(classes.root, this.props.className)}>\n        <div className={classes.sideBar}>\n          <ToggleButton /> /* green background and red while hovering parent */\n        </div>\n        <ToggleButton /> /* green background */\n      </div>\n    );\n  }\n}\n")))}m.isMDXComponent=!0}}]);